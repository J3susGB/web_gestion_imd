{"version":3,"sources":["autoAceptar.js","borrar_nombramiento.js","contar.js","contar_partidos.js","enviar_partido.js","motivo_rechazo.js","nombrar_partido.js","partidos.js","sweetAlert.js","sweetAlert2.js","sweetAlert3.js","sweetAlert4.js","sweetAlert_restablecer.js","toogle.js","toogle_arbitros.js","ultima_modificacion.js"],"names":["document","addEventListener","querySelectorAll","forEach","button","async","e","preventDefault","parentContainer","this","closest","alert","inputElement","querySelector","arbitroId","value","partidoId","localStorage","setItem","respuesta","fetch","method","headers","Content-Type","body","JSON","stringify","arbitro","partido","respuestaTexto","text","data","parse","ok","success","message","location","reload","error","console","storedPartidoId","getItem","partidoElement","scrollIntoView","behavior","block","removeItem","contarArbitros","arbitrosVisibles","textContent","length","filtro","contarPartidos","partidosVisibles","partidosFiltrados","Array","from","filter","offsetParent","classList","contains","botonRestablecer","input","radio","checked","select","selectedIndex","json","enviarSolicitud","iconosRechazado","modal","createElement","add","appendChild","icon","rect","getBoundingClientRect","observaciones","getAttribute","style","left","window","scrollX","top","scrollY","display","mostrarModal","partidoArbitroContainer","hasAttribute","successMessage","event","target","id","suggestionsList","nextElementSibling","query","trim","encodeURIComponent","then","response","Error","status","log","innerHTML","Ã¡rbitro","li","apellido1","apellido2","nombre","setAttribute","catch","registrer_btn","Swal","fire","title","background","color","customClass","popup","confirmButton","showConfirmButton","confirmButtonColor","timer","setTimeout","remove","form","showCancelButton","confirmButtonText","cancelButtonText","cancelButtonColor","backdrop","cancelButton","result","isConfirmed","submit","action","FormData","href","formData","toggle","userId","isActive","activo","toggle_arbitros","arbitro_id"],"mappings":"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","file":"bundle.js","sourcesContent":["document.addEventListener('DOMContentLoaded', () => {\r\n    const dropButtons = document.querySelectorAll('.auto_aceptar');\r\n\r\n    dropButtons.forEach(button => {\r\n        button.addEventListener('click', async function (e) {\r\n            e.preventDefault();\r\n\r\n            const parentContainer = this.closest('.partidos__partido');\r\n            if (!parentContainer) {\r\n                alert('Error: No se pudo encontrar el contenedor del partido.');\r\n                return;\r\n            }\r\n\r\n            const inputElement = parentContainer.querySelector('input[name=\"id_arbi\"]');\r\n            if (!inputElement) {\r\n                alert('Error: No se encontrÃ³ el input del Ã¡rbitro.');\r\n                return;\r\n            }\r\n\r\n            const arbitroId = inputElement.value;\r\n            const partidoId = parentContainer.querySelector('input[name=\"id\"]').value;\r\n\r\n            // Guarda el ID del partido en localStorage\r\n            localStorage.setItem('scrollToPartidoId', partidoId);\r\n\r\n            try {\r\n                const respuesta = await fetch('/admin/partidos/autoaceptar', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify({ arbitro: arbitroId, partido: partidoId }),\r\n                });\r\n\r\n                const respuestaTexto = await respuesta.text();\r\n                try {\r\n                    const data = JSON.parse(respuestaTexto);\r\n\r\n                    if (respuesta.ok && data.success) {\r\n                        alert(data.message || 'Â¡Partido confirmado correctamente!');\r\n                        location.reload();\r\n                    } else {\r\n                        alert(data.message || 'Hubo un error al procesar la solicitud.');\r\n                    }\r\n                } catch (error) {\r\n                    console.error('Error al procesar la respuesta del servidor:', respuestaTexto, error);\r\n                    alert('Error en la comunicaciÃ³n con el servidor.');\r\n                }\r\n            } catch (error) {\r\n                console.error('Error en la comunicaciÃ³n con el servidor:', error);\r\n                alert('Error en la comunicaciÃ³n con el servidor.');\r\n            }\r\n        });\r\n    });\r\n\r\n    // Desplazarse al partido guardado despuÃ©s de recargar\r\n    const storedPartidoId = localStorage.getItem('scrollToPartidoId');\r\n    if (storedPartidoId) {\r\n        const partidoElement = document.querySelector(`.partidos__partido[data-partido-id=\"${storedPartidoId}\"]`);\r\n        if (partidoElement) {\r\n            partidoElement.scrollIntoView({ behavior: 'smooth', block: 'start' });\r\n        }\r\n        localStorage.removeItem('scrollToPartidoId');\r\n    }\r\n});\r\n","document.addEventListener('DOMContentLoaded', () => {\r\n    const dropButtons = document.querySelectorAll('.borrar');\r\n\r\n    dropButtons.forEach(button => {\r\n        button.addEventListener('click', async function (e) {\r\n            e.preventDefault();\r\n\r\n            const parentContainer = this.closest('.partidos__partido');\r\n            if (!parentContainer) {\r\n                alert('Error: No se pudo encontrar el contenedor del partido.');\r\n                return;\r\n            }\r\n\r\n            const inputElement = parentContainer.querySelector('input[name=\"id_arbi\"]');\r\n            if (!inputElement) {\r\n                alert('Error: No se encontrÃ³ el input del Ã¡rbitro.');\r\n                return;\r\n            }\r\n\r\n            const arbitroId = inputElement.value;\r\n            const partidoId = parentContainer.querySelector('input[name=\"id\"]').value;\r\n\r\n            // Guarda el ID del partido en localStorage\r\n            localStorage.setItem('scrollToPartidoId', partidoId);\r\n\r\n            try {\r\n                const respuesta = await fetch('/admin/partidos/borrar_nombramiento', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify({ arbitro: arbitroId, partido: partidoId }),\r\n                });\r\n\r\n                const respuestaTexto = await respuesta.text();\r\n                try {\r\n                    const data = JSON.parse(respuestaTexto);\r\n\r\n                    if (respuesta.ok && data.success) {\r\n                        alert(data.message || 'Â¡Ãrbitro borrado correctamente!');\r\n                        location.reload();\r\n                    } else {\r\n                        alert(data.message || 'Hubo un error al procesar la solicitud.');\r\n                    }\r\n                } catch (error) {\r\n                    console.error('Error al procesar la respuesta del servidor:', respuestaTexto, error);\r\n                    alert('Error en la comunicaciÃ³n con el servidor.');\r\n                }\r\n            } catch (error) {\r\n                console.error('Error en la comunicaciÃ³n con el servidor:', error);\r\n                alert('Error en la comunicaciÃ³n con el servidor.');\r\n            }\r\n        });\r\n    });\r\n\r\n    // Desplazarse al partido guardado despuÃ©s de recargar\r\n    const storedPartidoId = localStorage.getItem('scrollToPartidoId');\r\n    if (storedPartidoId) {\r\n        const partidoElement = document.querySelector(`.partidos__partido[data-partido-id=\"${storedPartidoId}\"]`);\r\n        if (partidoElement) {\r\n            partidoElement.scrollIntoView({ behavior: 'smooth', block: 'start' });\r\n        }\r\n        localStorage.removeItem('scrollToPartidoId');\r\n    }\r\n});\r\n","\r\ndocument.addEventListener('DOMContentLoaded', function () {\r\n    // Contar los Ã¡rbitros visibles en la pantalla\r\n    function contarArbitros() {\r\n        // Obtenemos todos los contenedores de Ã¡rbitros\r\n        const arbitrosVisibles = document.querySelectorAll('.arbitros__card');\r\n\r\n        // Actualizamos el contador en la pantalla\r\n        const contarElement = document.querySelector('.contar_arbitros h3');\r\n        contarElement.textContent = `${arbitrosVisibles.length} personas`;\r\n    }\r\n\r\n    // Llamamos a contarArbitros para mostrar el nÃºmero al cargar la pÃ¡gina\r\n    contarArbitros();\r\n\r\n    // Event listener para cuando los filtros cambien\r\n    const filtros = document.querySelectorAll('input[type=\"text\"], input[type=\"radio\"], button');\r\n\r\n    filtros.forEach(filtro => {\r\n        filtro.addEventListener('change', function () {\r\n            // Llamamos nuevamente a contarArbitros cuando se cambien los filtros\r\n            contarArbitros();\r\n        });\r\n    });\r\n});\r\n\r\n","document.addEventListener('DOMContentLoaded', function () {\r\n    // Contar los partidos visibles en la pantalla\r\n    function contarPartidos() {\r\n        // Obtenemos todos los contenedores de partidos visibles que NO son filtros\r\n        const partidosVisibles = document.querySelectorAll('.partidos__partido');\r\n        const partidosFiltrados = Array.from(partidosVisibles).filter(partido => {\r\n            return partido.offsetParent !== null && \r\n                   !partido.classList.contains('partidos__filtro') && \r\n                   partido.querySelector('.partidos__partido--id');\r\n        });\r\n\r\n        // Actualizamos el contador en la pantalla\r\n        const contarElement = document.querySelector('.contar_partidos h3');\r\n        contarElement.textContent = `${partidosFiltrados.length} partidos`;\r\n    }\r\n\r\n    // Llamamos a contarPartidos para mostrar el nÃºmero al cargar la pÃ¡gina\r\n    contarPartidos();\r\n\r\n    // Event listener para cuando los filtros cambien\r\n    const filtros = document.querySelectorAll('input[type=\"text\"], input[type=\"radio\"], select, button.partidos__boton-filtro');\r\n\r\n    filtros.forEach(filtro => {\r\n        filtro.addEventListener('change', function () {\r\n            // Llamamos nuevamente a contarPartidos cuando se cambien los filtros\r\n            contarPartidos();\r\n        });\r\n    });\r\n\r\n    // ValidaciÃ³n para el botÃ³n \"Borrar filtros\"\r\n    const botonRestablecer = document.querySelector('.partidos__boton-filtro');\r\n    if (botonRestablecer) {\r\n        botonRestablecer.addEventListener('click', function () {\r\n            // Limpiamos los filtros\r\n            document.querySelectorAll('input[type=\"text\"]').forEach(input => input.value = '');\r\n            document.querySelectorAll('input[type=\"radio\"]').forEach(radio => radio.checked = false);\r\n            document.querySelectorAll('select').forEach(select => select.selectedIndex = 0);\r\n\r\n            // Recontamos los partidos visibles\r\n            contarPartidos();\r\n        });\r\n    }\r\n});\r\n\r\n","// document.addEventListener('DOMContentLoaded', () => {\r\n//     const sendButtons = document.querySelectorAll('.send');\r\n\r\n//     sendButtons.forEach(button => {\r\n//         button.addEventListener('click', async function (e) {\r\n//             e.preventDefault();\r\n\r\n//             const parentContainer = this.closest('.partidos__partido');\r\n//             if (!parentContainer) {\r\n//                 alert('Error: No se pudo encontrar el contenedor del partido.');\r\n//                 return;\r\n//             }\r\n\r\n//             const inputElement = parentContainer.querySelector('input[name=\"id_arbi\"]');\r\n//             if (!inputElement) {\r\n//                 alert('Error: No se encontrÃ³ el input del Ã¡rbitro.');\r\n//                 return;\r\n//             }\r\n\r\n//             const arbitroId = inputElement.value;\r\n//             const partidoId = parentContainer.querySelector('input[name=\"id\"]').value;\r\n\r\n//             await enviarSolicitud(partidoId, arbitroId);\r\n\r\n//             async function enviarSolicitud(partidoId, arbitroId) {\r\n//                 try {\r\n//                     const respuesta = await fetch('/admin/partidos/enviar_partido', {\r\n//                         method: 'POST',\r\n//                         headers: {\r\n//                             'Content-Type': 'application/json',\r\n//                         },\r\n//                         body: JSON.stringify({ arbitro: arbitroId, partido: partidoId }),\r\n//                     });\r\n\r\n//                     if (!respuesta.ok) {\r\n//                         alert('Error en el servidor.');\r\n//                         return;\r\n//                     }\r\n\r\n//                     const data = await respuesta.json();\r\n\r\n//                     if (data.success) {\r\n//                         alert(data.message || 'Â¡Partido designado y enviado!');\r\n\r\n//                         // Actualiza el nombre del Ã¡rbitro si hay un contenedor especÃ­fico\r\n//                         const arbitroNombre = inputElement.getAttribute('data-arbitro-nombre') || 'Ãrbitro asignado';\r\n//                         const partidoArbitroContainer = parentContainer.querySelector('.partidos__partido--arbitro');\r\n//                         if (partidoArbitroContainer) {\r\n//                             partidoArbitroContainer.innerHTML = `\r\n//                                 <span class=\"arbitro-nombre\">${arbitroNombre}</span>\r\n//                             `;\r\n//                         }\r\n\r\n//                         // Actualiza la imagen dentro del <picture>\r\n//                         const pictureElement = parentContainer.querySelector('picture');\r\n//                         if (pictureElement) {\r\n//                             const estadoImage = pictureElement.querySelector('#send');\r\n//                             if (estadoImage) {\r\n//                                 estadoImage.src = \"/build/img/nombrado.png\";\r\n//                                 estadoImage.alt = \"BotÃ³n para nombrar\";\r\n\r\n//                                 // Actualiza los atributos `srcset` en <source>\r\n//                                 const sources = pictureElement.querySelectorAll('source');\r\n//                                 sources.forEach(source => {\r\n//                                     const type = source.getAttribute('type');\r\n//                                     if (type === 'image/avif') {\r\n//                                         source.srcset = \"/build/img/nombrado.avif\";\r\n//                                     } else if (type === 'image/webp') {\r\n//                                         source.srcset = \"/build/img/nombrado.webp\";\r\n//                                     }\r\n//                                 });\r\n//                             }\r\n//                         }\r\n//                     } else {\r\n//                         alert(data.message || 'Hubo un error al enviar los datos.');\r\n//                     }\r\n//                 } catch (error) {\r\n//                     console.error('Error en la comunicaciÃ³n con el servidor:', error);\r\n//                     alert('Error en la comunicaciÃ³n con el servidor.');\r\n//                 }\r\n//             }\r\n//         });\r\n//     });\r\n\r\n//     // Manejo de desplazamiento al partido desde la URL\r\n//     const urlParams = new URLSearchParams(window.location.search);\r\n//     const partidoId = urlParams.get('partidoId');\r\n\r\n//     if (partidoId) {\r\n//         const partidoElement = document.querySelector(`.partidos__partido[data-partido-id=\"${partidoId}\"]`);\r\n//         if (partidoElement) {\r\n//             partidoElement.scrollIntoView({ behavior: 'smooth', block: 'start' });\r\n//             const newUrl = window.location.href.split('?')[0];\r\n//             window.history.replaceState({}, document.title, newUrl);\r\n//         }\r\n//     }\r\n// });\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    const sendButtons = document.querySelectorAll('.send');\r\n\r\n    sendButtons.forEach(button => {\r\n        button.addEventListener('click', async function (e) {\r\n            e.preventDefault();\r\n\r\n            const parentContainer = this.closest('.partidos__partido');\r\n            if (!parentContainer) {\r\n                alert('Error: No se pudo encontrar el contenedor del partido.');\r\n                return;\r\n            }\r\n\r\n            const inputElement = parentContainer.querySelector('input[name=\"id_arbi\"]');\r\n            if (!inputElement) {\r\n                alert('Error: No se encontrÃ³ el input del Ã¡rbitro.');\r\n                return;\r\n            }\r\n\r\n            const arbitroId = inputElement.value;\r\n            const partidoId = parentContainer.querySelector('input[name=\"id\"]').value;\r\n\r\n            // Guarda el ID del partido en localStorage\r\n            localStorage.setItem('scrollToPartidoId', partidoId);\r\n\r\n            await enviarSolicitud(partidoId, arbitroId);\r\n\r\n            async function enviarSolicitud(partidoId, arbitroId) {\r\n                try {\r\n                    const respuesta = await fetch('/admin/partidos/enviar_partido', {\r\n                        method: 'POST',\r\n                        headers: {\r\n                            'Content-Type': 'application/json',\r\n                        },\r\n                        body: JSON.stringify({ arbitro: arbitroId, partido: partidoId }),\r\n                    });\r\n\r\n                    if (!respuesta.ok) {\r\n                        alert('Error en el servidor.');\r\n                        return;\r\n                    }\r\n\r\n                    const data = await respuesta.json();\r\n\r\n                    if (data.success) {\r\n                        alert(data.message || 'Â¡Partido designado y enviado!');\r\n\r\n                        // Recarga la pÃ¡gina para reflejar los cambios\r\n                        location.reload();\r\n                    } else {\r\n                        alert(data.message || 'Hubo un error al enviar los datos.');\r\n                    }\r\n                } catch (error) {\r\n                    console.error('Error en la comunicaciÃ³n con el servidor:', error);\r\n                    alert('Error en la comunicaciÃ³n con el servidor.');\r\n                }\r\n            }\r\n        });\r\n    });\r\n\r\n    // Desplazarse al partido guardado despuÃ©s de recargar\r\n    const storedPartidoId = localStorage.getItem('scrollToPartidoId');\r\n    if (storedPartidoId) {\r\n        const partidoElement = document.querySelector(`.partidos__partido[data-partido-id=\"${storedPartidoId}\"]`);\r\n        if (partidoElement) {\r\n            partidoElement.scrollIntoView({ behavior: 'smooth', block: 'start' });\r\n        }\r\n        // Eliminar el ID del localStorage una vez usado\r\n        localStorage.removeItem('scrollToPartidoId');\r\n    }\r\n});\r\n","document.addEventListener('DOMContentLoaded', function () {\r\n    const iconosRechazado = document.querySelectorAll('.negacion');\r\n\r\n    // Crear el modal dinÃ¡micamente\r\n    const modal = document.createElement('div');\r\n    modal.classList.add('modal-hover');\r\n    document.body.appendChild(modal);\r\n\r\n    iconosRechazado.forEach(icon => {\r\n        icon.addEventListener('mouseenter', function (e) {\r\n            mostrarModal(e, icon);\r\n        });\r\n\r\n        icon.addEventListener('mouseleave', function () {\r\n            ocultarModal();\r\n        });\r\n    });\r\n\r\n    /**\r\n     * Mostrar Modal al Hover\r\n     * @param {Event} e - Evento de mouse\r\n     * @param {Element} icon - Elemento sobre el que se hizo hover\r\n     */\r\n    function mostrarModal(e, icon) {\r\n        const rect = icon.getBoundingClientRect();\r\n        const observaciones = icon.getAttribute('data-observaciones') || 'Sin observaciones';\r\n\r\n        modal.textContent = observaciones; // Mostrar el valor Ãºnico de observaciones\r\n        modal.style.left = `${rect.left + window.scrollX - 200}px`;\r\n        modal.style.top = `${rect.top + window.scrollY - 5}px`;\r\n\r\n        modal.style.display = 'block';\r\n    }\r\n\r\n    /**\r\n     * Ocultar Modal al salir del Hover\r\n     */\r\n    function ocultarModal() {\r\n        modal.style.display = 'none';\r\n    }\r\n});\r\n","document.addEventListener('DOMContentLoaded', () => {\r\n    const saveButtons = document.querySelectorAll('.save');\r\n\r\n    saveButtons.forEach(button => {\r\n        button.addEventListener('click', async function (e) {\r\n            e.preventDefault();\r\n\r\n            const parentContainer = this.closest('.partidos__partido');\r\n            if (!parentContainer) {\r\n                alert('Error: No se pudo encontrar el contenedor del partido.');\r\n                return;\r\n            }\r\n\r\n            const partidoArbitroContainer = parentContainer.querySelector('.partidos__partido--arbitro');\r\n            if (!partidoArbitroContainer) {\r\n                alert('Error: No se encontrÃ³ el input del Ã¡rbitro.');\r\n                return;\r\n            }\r\n\r\n            const inputElement = partidoArbitroContainer.querySelector('.arbitro_autocomplete');\r\n            if (!inputElement || !inputElement.hasAttribute('data-arbitro-id')) {\r\n                alert('Por favor, selecciona un Ã¡rbitro de la lista antes de guardar.');\r\n                return;\r\n            }\r\n\r\n            const arbitroId = inputElement.getAttribute('data-arbitro-id');\r\n            const partidoId = this.closest('form').querySelector('input[name=\"id\"]').value;\r\n\r\n            // Guarda el ID del partido en localStorage\r\n            localStorage.setItem('scrollToPartidoId', partidoId);\r\n\r\n            await enviarSolicitud(partidoId, arbitroId);\r\n\r\n            async function enviarSolicitud(partidoId, arbitroId) {\r\n                try {\r\n                    const respuesta = await fetch('/admin/partidos/nombrar', {\r\n                        method: 'POST',\r\n                        headers: {\r\n                            'Content-Type': 'application/json',\r\n                        },\r\n                        body: JSON.stringify({ arbitro: arbitroId, partido: partidoId }),\r\n                    });\r\n\r\n                    const respuestaTexto = await respuesta.text();\r\n\r\n                    if (!respuesta.ok) {\r\n                        alert('Error en el servidor.');\r\n                        return;\r\n                    }\r\n\r\n                    const data = JSON.parse(respuestaTexto);\r\n\r\n                    if (data.success) {\r\n                        const successMessage = data.message || 'Â¡Ãrbitro guardado correctamente!';\r\n                        alert(successMessage);\r\n\r\n                        // Recarga la pÃ¡gina para reflejar los cambios\r\n                        location.reload();\r\n                    } else {\r\n                        alert(data.message || 'Hubo un error al guardar los datos.');\r\n                    }\r\n                } catch (error) {\r\n                    alert('Error en la comunicaciÃ³n con el servidor.');\r\n                }\r\n            }\r\n        });\r\n    });\r\n\r\n    // Desplazarse al partido guardado despuÃ©s de recargar\r\n    const storedPartidoId = localStorage.getItem('scrollToPartidoId');\r\n    if (storedPartidoId) {\r\n        const partidoElement = document.querySelector(`.partidos__partido[data-partido-id=\"${storedPartidoId}\"]`);\r\n        if (partidoElement) {\r\n            partidoElement.scrollIntoView({ behavior: 'smooth', block: 'start' });\r\n        }\r\n        // Eliminar el ID del localStorage una vez usado\r\n        localStorage.removeItem('scrollToPartidoId');\r\n    }\r\n});\r\n","// document.addEventListener('DOMContentLoaded', function () {\r\n//     // DelegaciÃ³n de eventos: aplicar a todos los inputs con la clase 'arbitro_autocomplete'\r\n//     document.body.addEventListener('input', function (event) {\r\n//         // Verificar si el evento es para un input con id 'arbitro_autocomplete'\r\n//         if (event.target && event.target.id === 'arbitro_autocomplete') {\r\n//             const input = event.target;\r\n//             const suggestionsList = input.nextElementSibling; // La lista de sugerencias estÃ¡ justo despuÃ©s del input\r\n//             const query = input.value.trim();\r\n\r\n//             // Log para asegurarnos de que el evento se estÃ¡ disparando correctamente\r\n//             console.log('Evento de input detectado para:', input.id);\r\n\r\n//             // Realizar bÃºsqueda solo si hay al menos 2 caracteres\r\n//             if (query.length >= 2) {\r\n//                 console.log('Consultando Ã¡rbitros con la query:', query); // Verifica la consulta\r\n\r\n//                 // Realizar una peticiÃ³n AJAX al servidor para obtener los Ã¡rbitros que coinciden\r\n//                 fetch(`/admin/partidos/autocompletar_arbitros`, {\r\n//                     method: 'POST',\r\n//                     headers: {\r\n//                         'Content-Type': 'application/x-www-form-urlencoded',\r\n//                     },\r\n//                     body: `q=${encodeURIComponent(query)}` // Enviar la consulta con mÃºltiples palabras\r\n//                 })\r\n//                 .then(response => {\r\n//                     if (!response.ok) {\r\n//                         throw new Error('Error al obtener la respuesta del servidor');\r\n//                     }\r\n//                     return response.json();\r\n//                 })\r\n//                 .then(data => {\r\n//                     suggestionsList.innerHTML = ''; // Limpiar las sugerencias previas\r\n\r\n//                     if (data.length > 0) {\r\n//                         data.forEach(Ã¡rbitro => {\r\n//                             const li = document.createElement('li');\r\n//                             li.textContent = `${Ã¡rbitro.apellido1} ${Ã¡rbitro.apellido2}, ${Ã¡rbitro.nombre}`;\r\n//                             li.setAttribute('data-id', Ã¡rbitro.id);\r\n//                             suggestionsList.appendChild(li);\r\n\r\n//                             // AÃ±adir evento de selecciÃ³n al hacer clic en un Ã¡rbitro\r\n//                             li.addEventListener('click', function () {\r\n//                                 input.value = `${Ã¡rbitro.apellido1} ${Ã¡rbitro.apellido2}, ${Ã¡rbitro.nombre}`;\r\n//                                 input.setAttribute('data-arbitro-id', Ã¡rbitro.id); // Guardamos el id del Ã¡rbitro\r\n//                                 suggestionsList.innerHTML = ''; // Limpiar las sugerencias\r\n//                             });\r\n//                         });\r\n//                     } else {\r\n//                         suggestionsList.innerHTML = '<li>No se encontraron Ã¡rbitros.</li>';\r\n//                     }\r\n//                 })\r\n//                 .catch(error => {\r\n//                     console.error('Error al obtener los Ã¡rbitros:', error);\r\n//                     suggestionsList.innerHTML = `<li>Error: ${error.message}</li>`; // Mostrar el error en las sugerencias\r\n//                 });\r\n//             } else {\r\n//                 suggestionsList.innerHTML = ''; // Limpiar las sugerencias si el texto es menor de 2 caracteres\r\n//             }\r\n//         }\r\n//     });\r\n\r\n//     // Cerrar la lista de sugerencias al hacer clic fuera del input\r\n//     document.addEventListener('click', function (event) {\r\n//         if (!event.target.closest('.partidos__campo').contains(event.target)) {\r\n//             // Si el clic no es sobre el input ni sobre la lista de sugerencias\r\n//             const suggestionLists = document.querySelectorAll('.autocomplete-suggestions');\r\n//             suggestionLists.forEach(suggestionsList => {\r\n//                 suggestionsList.innerHTML = ''; // Limpiar todas las sugerencias\r\n//             });\r\n//         }\r\n//     });\r\n// });\r\n\r\n// Autocompletado de Ã¡rbitros\r\ndocument.addEventListener('DOMContentLoaded', function () {\r\n    // DelegaciÃ³n de eventos\r\n    document.body.addEventListener('input', function (event) {\r\n        if (event.target && event.target.id === 'arbitro_autocomplete') {\r\n            const input = event.target;\r\n            const suggestionsList = input.nextElementSibling; // La lista de sugerencias estÃ¡ despuÃ©s del input\r\n            const query = input.value.trim();\r\n\r\n            // BÃºsqueda solo si hay 2 o mÃ¡s caracteres\r\n            if (query.length >= 2) {\r\n                fetch(`/admin/partidos/autocompletar_arbitros`, {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/x-www-form-urlencoded',\r\n                    },\r\n                    body: `q=${encodeURIComponent(query)}`\r\n                })\r\n                .then(response => {\r\n                    if (!response.ok) {\r\n                        throw new Error(`Error HTTP: ${response.status}`);\r\n                    }\r\n                    return response.json();\r\n                })\r\n                .then(data => {\r\n                    console.log('Respuesta del servidor:', data); // DepuraciÃ³n\r\n                    suggestionsList.innerHTML = ''; // Limpiar sugerencias\r\n\r\n                    if (data.length > 0) {\r\n                        data.forEach(Ã¡rbitro => {\r\n                            const li = document.createElement('li');\r\n                            li.textContent = `${Ã¡rbitro.apellido1} ${Ã¡rbitro.apellido2}, ${Ã¡rbitro.nombre}`;\r\n                            li.setAttribute('data-id', Ã¡rbitro.id);\r\n                            suggestionsList.appendChild(li);\r\n\r\n                            li.addEventListener('click', function () {\r\n                                input.value = `${Ã¡rbitro.apellido1} ${Ã¡rbitro.apellido2}, ${Ã¡rbitro.nombre}`;\r\n                                input.setAttribute('data-arbitro-id', Ã¡rbitro.id);\r\n                                suggestionsList.innerHTML = '';\r\n                            });\r\n                        });\r\n                    } else {\r\n                        suggestionsList.innerHTML = '<li>No se encontraron Ã¡rbitros.</li>';\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    console.error('Error al obtener los Ã¡rbitros:', error);\r\n                    suggestionsList.innerHTML = `<li>Error: ${error.message}</li>`;\r\n                });\r\n            } else {\r\n                suggestionsList.innerHTML = ''; // Limpiar si hay menos de 2 caracteres\r\n            }\r\n        }\r\n    });\r\n\r\n    // Cerrar sugerencias al hacer clic fuera\r\n    document.addEventListener('click', function (event) {\r\n        if (!event.target.closest('.partidos__campo')) {\r\n            const suggestionLists = document.querySelectorAll('.autocomplete-suggestions');\r\n            suggestionLists.forEach(suggestionsList => {\r\n                suggestionsList.innerHTML = '';\r\n            });\r\n        }\r\n    });\r\n});\r\n","document.addEventListener('DOMContentLoaded', () => {\r\n    const button = document.querySelector('.alert');\r\n\r\n    const registrer_btn = document.querySelector('.alert');\r\n    registrer_btn.addEventListener('click', function () {\r\n        registrer_btn.classList.add('mostrar_sweet');\r\n        mostrar_alerta();\r\n        setTimeout(function () {\r\n            registrer_btn.classList.remove('mostrar_sweet');\r\n        }, 100)\r\n    });\r\n\r\n    function mostrar_alerta() {\r\n        Swal.fire({\r\n            icon: \"success\", // Ãcono de Ã©xito\r\n            title: \"Â¡Hecho!\", // Texto de Ã©xito\r\n            background: \"#4e4d4b\",  // Fondo personalizado de la alerta\r\n            color: \"#DDDDDD\",        // Color del texto\r\n            customClass: {\r\n                popup: 'custom-popup',     // Clase personalizada para el popup\r\n                title: 'custom-title',     // Clase personalizada para el tÃ­tulo\r\n                confirmButton: 'custom-button'  // Clase personalizada para el botÃ³n de confirmaciÃ³n\r\n            },\r\n            showConfirmButton: true, // Mostrar botÃ³n de confirmaciÃ³n\r\n            confirmButtonColor: \"#71B100\",  // Color para el botÃ³n de confirmaciÃ³n\r\n            timer: 3000, // Tiempo automÃ¡tico de cierre (opcional)\r\n        });\r\n    }\r\n});","document.addEventListener('DOMContentLoaded', () => {\r\n    const deleteButtons = document.querySelectorAll('.alert2'); // Selecciona todos los botones de eliminaciÃ³n\r\n\r\n    deleteButtons.forEach(button => {\r\n        button.addEventListener('click', function (e) {\r\n            const form = this.closest('form'); // ObtÃ©n el formulario asociado al botÃ³n\r\n            const itemId = form.querySelector('input[name=\"id\"]').value; // ObtÃ©n el ID desde el campo oculto\r\n\r\n            Swal.fire({\r\n                title: \"Al pulsar SÃ­, el contenido serÃ¡ eliminado, Â¿Desea confirmar?\",\r\n                showCancelButton: true,\r\n                confirmButtonText: \"SÃ­\",\r\n                cancelButtonText: \"No\",\r\n                confirmButtonColor: \"#71B100\",  // Color para el botÃ³n de confirmaciÃ³n\r\n                cancelButtonColor: \"#F05454\",   // Color para el botÃ³n de cancelaciÃ³n\r\n                backdrop: true,  // Oscurecer el fondo\r\n                background: \"#4e4d4b\",  // Fondo personalizado de la alerta\r\n                color: \"#DDDDDD\",        // Color del texto\r\n                icon: \"warning\",\r\n                customClass: {\r\n                    popup: 'custom-popup',     // Clase personalizada para el popup\r\n                    title: 'custom-title',     // Clase personalizada para el tÃ­tulo\r\n                    confirmButton: 'custom-button',  // Clase personalizada para el botÃ³n de confirmaciÃ³n\r\n                    cancelButton: 'custom-button'   // Clase personalizada para el botÃ³n de cancelaciÃ³n\r\n                }\r\n            }).then((result) => {\r\n                if (result.isConfirmed) {\r\n                    form.submit(); // EnvÃ­a el formulario si el usuario confirma\r\n                }\r\n            });\r\n        });\r\n    });\r\n\r\n    function mostrar_alerta() {\r\n        Swal.fire({\r\n            icon: \"success\",\r\n            title: \"Â¡Hecho!\"\r\n        });\r\n    }\r\n});\r\n","document.addEventListener('DOMContentLoaded', () => {\r\n    // Selecciona el botÃ³n de reset\r\n    const resetButton = document.querySelector('.alert3');\r\n\r\n    // AÃ±ade un evento de clic al botÃ³n\r\n    resetButton.addEventListener('click', function () {\r\n        // Muestra el cuadro de confirmaciÃ³n de SweetAlert\r\n        Swal.fire({\r\n            title: \"Al pulsar SÃ­, se eliminarÃ¡n todos los registros, Â¿Desea continuar?\",\r\n            showCancelButton: true,\r\n            confirmButtonText: \"SÃ­\",\r\n            cancelButtonText: \"No\",\r\n            confirmButtonColor: \"#71B100\",  // Color para el botÃ³n de confirmaciÃ³n\r\n            cancelButtonColor: \"#F05454\",   // Color para el botÃ³n de cancelaciÃ³n\r\n            backdrop: true,  // Oscurecer el fondo\r\n            background: \"#4e4d4b\",  // Fondo personalizado de la alerta\r\n            color: \"#DDDDDD\",        // Color del texto\r\n            icon: \"warning\",\r\n            customClass: {\r\n                popup: 'custom-popup',     // Clase personalizada para el popup\r\n                title: 'custom-title',     // Clase personalizada para el tÃ­tulo\r\n                confirmButton: 'custom-button',  // Clase personalizada para el botÃ³n de confirmaciÃ³n\r\n                cancelButton: 'custom-button'   // Clase personalizada para el botÃ³n de cancelaciÃ³n\r\n            }\r\n\r\n        }).then((result) => {\r\n            if (result.isConfirmed) {\r\n                // Si el usuario confirma, envÃ­a el formulario\r\n                const form = this.closest('form'); // ObtÃ©n el formulario asociado al botÃ³n\r\n                form.submit(); // EnvÃ­a el formulario para hacer el reset\r\n            }\r\n        });\r\n    });\r\n});\r\n","// document.addEventListener('DOMContentLoaded', () => {\r\n//     const deleteButtons = document.querySelectorAll('.alert4'); // Selecciona todos los botones con la clase 'alert2'\r\n\r\n//     deleteButtons.forEach(button => {\r\n//         button.addEventListener('click', function (e) {\r\n//             e.preventDefault(); // Prevenir el comportamiento predeterminado del botÃ³n\r\n\r\n//             const form = this.closest('form'); // ObtÃ©n el formulario asociado al botÃ³n\r\n\r\n//             Swal.fire({\r\n//                 title: \"Al pulsar SÃ­, el partido serÃ¡ eliminado, Â¿Desea confirmar?\",\r\n//                 showCancelButton: true,\r\n//                 confirmButtonText: \"SÃ­\",\r\n//                 cancelButtonText: \"No\",\r\n//                 confirmButtonColor: \"#71B100\",  // Color para el botÃ³n de confirmaciÃ³n\r\n//                 cancelButtonColor: \"#F05454\",   // Color para el botÃ³n de cancelaciÃ³n\r\n//                 backdrop: true,  // Oscurecer el fondo\r\n//                 background: \"#4e4d4b\",  // Fondo personalizado de la alerta\r\n//                 color: \"#DDDDDD\",        // Color del texto\r\n//                 icon: \"warning\",\r\n//                 customClass: {\r\n//                     popup: 'custom-popup',     // Clase personalizada para el popup\r\n//                     title: 'custom-title',     // Clase personalizada para el tÃ­tulo\r\n//                     confirmButton: 'custom-button',  // Clase personalizada para el botÃ³n de confirmaciÃ³n\r\n//                     cancelButton: 'custom-button'   // Clase personalizada para el botÃ³n de cancelaciÃ³n\r\n//                 }\r\n\r\n//             }).then((result) => {\r\n//                 if (result.isConfirmed) {\r\n//                     form.submit(); // EnvÃ­a el formulario si el usuario confirma\r\n//                 }\r\n//             });\r\n//         });\r\n//     });\r\n// });\r\n\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    const deleteButtons = document.querySelectorAll('.alert4');\r\n\r\n    deleteButtons.forEach(button => {\r\n        button.addEventListener('click', function (e) {\r\n            e.preventDefault();\r\n\r\n            const form = this.closest('form');\r\n\r\n            Swal.fire({\r\n                title: \"Al pulsar SÃ­, el partido serÃ¡ eliminado, Â¿Desea confirmar?\",\r\n                showCancelButton: true,\r\n                confirmButtonText: \"SÃ­\",\r\n                cancelButtonText: \"No\",\r\n                confirmButtonColor: \"#71B100\",\r\n                cancelButtonColor: \"#F05454\",\r\n                backdrop: true,\r\n                background: \"#4e4d4b\",\r\n                color: \"#DDDDDD\",\r\n                icon: \"warning\"\r\n            }).then((result) => {\r\n                if (result.isConfirmed) {\r\n                    fetch(form.action, {\r\n                        method: 'POST',\r\n                        body: new FormData(form)\r\n                    })\r\n                        .then(response => response.json())\r\n                        .then(data => {\r\n                            if (data.success) {\r\n                                Swal.fire({\r\n                                    title: 'Eliminado',\r\n                                    text: 'El partido ha sido eliminado.',\r\n                                    icon: 'success',\r\n                                    confirmButtonText: \"Aceptar\",\r\n                                    confirmButtonColor: \"#71B100\",\r\n                                    background: \"#4e4d4b\",  // Fondo personalizado de la alerta\r\n                                    color: \"#DDDDDD\",  // Color del texto\r\n                                    customClass: {\r\n                                        popup: 'custom-popup',  // Clase personalizada para el popup\r\n                                        title: 'custom-title',  // Clase personalizada para el tÃ­tulo\r\n                                        confirmButton: 'custom-button',  // Clase personalizada para el botÃ³n de confirmaciÃ³n\r\n                                    }\r\n                                }).then(() => {\r\n                                    window.location.href = '/admin/partidos'; // Redirige al usuario\r\n                                });\r\n                            } else {\r\n                                Swal.fire({\r\n                                    title: 'Error',\r\n                                    text: data.message,\r\n                                    icon: 'error',\r\n                                    confirmButtonText: \"Aceptar\",\r\n                                    confirmButtonColor: \"#F05454\",\r\n                                    background: \"#4e4d4b\",  // Fondo personalizado de la alerta\r\n                                    color: \"#DDDDDD\",  // Color del texto\r\n                                    customClass: {\r\n                                        popup: 'custom-popup',  // Clase personalizada para el popup\r\n                                        title: 'custom-title',  // Clase personalizada para el tÃ­tulo\r\n                                        confirmButton: 'custom-button',  // Clase personalizada para el botÃ³n de confirmaciÃ³n\r\n                                    }\r\n                                });\r\n                            }\r\n                        })\r\n                        .catch(error => {\r\n                            Swal.fire({\r\n                                title: 'Error',\r\n                                text: 'Algo saliÃ³ mal.',\r\n                                icon: 'error',\r\n                                confirmButtonText: \"Aceptar\",\r\n                                confirmButtonColor: \"#F05454\",\r\n                                background: \"#4e4d4b\",  // Fondo personalizado de la alerta\r\n                                color: \"#DDDDDD\",  // Color del texto\r\n                                customClass: {\r\n                                    popup: 'custom-popup',  // Clase personalizada para el popup\r\n                                    title: 'custom-title',  // Clase personalizada para el tÃ­tulo\r\n                                    confirmButton: 'custom-button',  // Clase personalizada para el botÃ³n de confirmaciÃ³n\r\n                                }\r\n                            });\r\n                        });\r\n                }\r\n            });\r\n        });\r\n    });\r\n});\r\n","document.addEventListener('DOMContentLoaded', () => {\r\n    const button = document.querySelector('.alert_restablecer');\r\n\r\n    button.addEventListener('click', function () {\r\n        const form = button.closest('form'); // Obtiene el formulario mÃ¡s cercano al botÃ³n\r\n        const formData = new FormData(form); // Crea un objeto FormData con los datos del formulario\r\n\r\n        // URL especÃ­fica para el envÃ­o\r\n        const url = '/admin/perfiles/restablecer_password';\r\n\r\n        fetch(url, {\r\n            method: 'POST',\r\n            body: formData,\r\n        })\r\n        .then(response => {\r\n            if (!response.ok) {\r\n                throw new Error('Error en la solicitud'); // Manejo de errores si la respuesta no es OK\r\n            }\r\n            return response.json(); // Procesa la respuesta como JSON\r\n        })\r\n        .then(data => {\r\n            // Muestra la alerta de Ã©xito al finalizar el POST\r\n            mostrar_alerta();\r\n        })\r\n        .catch(error => {\r\n            console.error('Hubo un problema con la solicitud:', error); // Muestra el error en la consola\r\n        });\r\n    });\r\n\r\n    function mostrar_alerta() {\r\n        Swal.fire({\r\n            icon: \"success\", // Ãcono de Ã©xito\r\n            title: \"Se ha enviado email para restablecer la contraseÃ±a\", // Texto de Ã©xito\r\n            background: \"#4e4d4b\",  // Fondo personalizado de la alerta\r\n            color: \"#DDDDDD\",        // Color del texto\r\n            customClass: {\r\n                popup: 'custom-popup',     // Clase personalizada para el popup\r\n                title: 'custom-title',     // Clase personalizada para el tÃ­tulo\r\n                confirmButton: 'custom-button'  // Clase personalizada para el botÃ³n de confirmaciÃ³n\r\n            },\r\n            showConfirmButton: true, // Mostrar botÃ³n de confirmaciÃ³n\r\n            confirmButtonColor: \"#71B100\",  // Color para el botÃ³n de confirmaciÃ³n\r\n            timer: 3000, // Tiempo automÃ¡tico de cierre (opcional)\r\n        });\r\n    }\r\n});\r\n","(function() {\r\n    document.querySelectorAll('.toogle_check').forEach(toggle => {\r\n        toggle.addEventListener('change', async function () {\r\n            const userId = this.getAttribute('data-id');\r\n            const isActive = this.checked ? 1 : 0;\r\n\r\n            try {\r\n                const response = await fetch('/admin/perfiles/actualizar-estado', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify({ id: userId, activo: isActive }),\r\n                });\r\n\r\n                const result = await response.json();\r\n                if (!result.success) {\r\n                    alert('Error actualizando el estado');\r\n                    this.checked = !this.checked; // Revertir si hay error\r\n                }\r\n            } catch (error) {\r\n                alert('Error en el servidor');\r\n                this.checked = !this.checked; // Revertir si hay error\r\n            }\r\n        });\r\n    });\r\n})();\r\n","(function() {\r\n    document.querySelectorAll('.check_arbis').forEach(toggle_arbitros => {\r\n        toggle_arbitros.addEventListener('change', async function () {\r\n            const arbitro_id = this.getAttribute('data-id');\r\n            const activo = this.checked ? 1 : 0;\r\n\r\n            // console.log(`Toggle changed for ID: ${arbitro_id}, Active: ${activo}`); // Para depuraciÃ³n\r\n\r\n            try {\r\n                const respuesta = await fetch('/admin/arbitros/actualizar-estado', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify({ id: arbitro_id, activo: activo }),\r\n                });\r\n\r\n                // Verifica si la respuesta es exitosa\r\n                if (respuesta.ok) {\r\n                    const resultado_arbis = await respuesta.json(); // Convierte la respuesta a JSON\r\n\r\n                    // console.log('Respuesta recibida:', resultado_arbis); // DepuraciÃ³n\r\n\r\n                    // Solo mostrar alerta si resultado_arbis.success es verdadero\r\n                    if (resultado_arbis.success) {\r\n                        // console.log('Estado actualizado con Ã©xito');\r\n                        // alert('Estado actualizado con Ã©xito');\r\n                        \r\n                        // Actualizar el estado visual en la UI inmediatamente\r\n                        // Si el estado cambia a activo (1), el toggle se marca, si no, se desmarca.\r\n                        this.checked = activo === 1; \r\n\r\n                    } else {\r\n                        // console.log('Hubo un error en el servidor al actualizar el estado');\r\n                        alert('Error actualizando el estado');\r\n                        // Si hubo un error, revertir el estado del checkbox\r\n                        this.checked = !this.checked; \r\n                    }\r\n                } else {\r\n                    throw new Error('Error en la respuesta del servidor');\r\n                }\r\n            } catch (error) {\r\n                console.error('Error en la comunicaciÃ³n con el servidor:', error);\r\n                alert('Error en el servidor');\r\n                // Si hay un error en la comunicaciÃ³n, revertir el estado\r\n                this.checked = !this.checked; \r\n            }\r\n        });\r\n    });\r\n})();\r\n","document.addEventListener('DOMContentLoaded', function () {\r\n    const iconosRechazado = document.querySelectorAll('.modi');\r\n\r\n    // Crear el modal dinÃ¡micamente\r\n    const modal = document.createElement('div');\r\n    modal.classList.add('modal-hover-modi');\r\n    document.body.appendChild(modal);\r\n\r\n    iconosRechazado.forEach(icon => {\r\n        icon.addEventListener('mouseenter', function (e) {\r\n            mostrarModal(e, icon);\r\n        });\r\n\r\n        icon.addEventListener('mouseleave', function () {\r\n            ocultarModal();\r\n        });\r\n    });\r\n\r\n    /**\r\n     * Mostrar Modal al Hover\r\n     * @param {Event} e - Evento de mouse\r\n     * @param {Element} icon - Elemento sobre el que se hizo hover\r\n     */\r\n    function mostrarModal(e, icon) {\r\n        const rect = icon.getBoundingClientRect();\r\n        const observaciones = icon.getAttribute('data-observaciones') || 'Sin observaciones';\r\n\r\n        modal.textContent = observaciones; // Mostrar el valor Ãºnico de observaciones\r\n        modal.style.left = `${rect.left + window.scrollX + 35}px`;\r\n        modal.style.top = `${rect.top + window.scrollY - 5}px`;\r\n\r\n        modal.style.display = 'block';\r\n    }\r\n\r\n    /**\r\n     * Ocultar Modal al salir del Hover\r\n     */\r\n    function ocultarModal() {\r\n        modal.style.display = 'none';\r\n    }\r\n});\r\n"]}