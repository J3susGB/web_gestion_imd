{"version":3,"sources":["autoAceptar.js","borrar_nombramiento.js","botonScroll.js","contar.js","contar_partidos.js","enviar_partido.js","motivo_rechazo.js","nombrar_partido.js","partidos.js","sweetAlert.js","sweetAlert2.js","sweetAlert3.js","sweetAlert4.js","sweetAlert5.js","toogle.js","toogle_ajustes.js","toogle_arbitros.js","ultima_modificacion.js"],"names":["document","addEventListener","querySelectorAll","forEach","button","async","e","preventDefault","parentContainer","this","closest","alert","inputElement","querySelector","arbitroId","value","partidoId","localStorage","setItem","respuesta","fetch","method","headers","Content-Type","body","JSON","stringify","arbitro","partido","respuestaTexto","text","data","parse","ok","success","message","location","reload","error","console","storedPartidoId","getItem","partidoElement","scrollIntoView","behavior","block","removeItem","scrollButtons","mediaQuery","window","matchMedia","isScrolling","style","top","bottom","scrollTop","scrollY","scrollHeight","documentElement","isBottom","clientHeight","log","matches","classList","add","clearTimeout","setTimeout","remove","smoothScroll","targetY","duration","startY","distance","startTime","performance","now","animateScroll","currentTime","timeElapsed","progress","Math","min","easedProgress","t","pow","scrollTo","requestAnimationFrame","scrollUpButton","getElementById","scrollDownButton","contarArbitros","arbitrosVisibles","textContent","length","filtro","contarPartidos","partidosVisibles","partidosFiltrados","Array","from","filter","offsetParent","contains","botonRestablecer","input","radio","checked","select","selectedIndex","json","enviarSolicitud","iconosRechazado","modal","createElement","appendChild","icon","rect","getBoundingClientRect","observaciones","getAttribute","left","scrollX","display","mostrarModal","partidoArbitroContainer","hasAttribute","successMessage","event","target","id","suggestionsList","nextElementSibling","query","trim","encodeURIComponent","then","response","Error","status","innerHTML","Ã¡rbitro","li","apellido1","apellido2","nombre","setAttribute","catch","registrer_btn","Swal","fire","title","background","color","customClass","popup","confirmButton","showConfirmButton","confirmButtonColor","timer","form","showCancelButton","confirmButtonText","cancelButtonText","cancelButtonColor","backdrop","cancelButton","result","isConfirmed","submit","action","FormData","href","toggle","userId","isActive","activo","valores","futbol-partidos","futbol-sxjx","sala-partidos","sala-sxjx","actualizarNumero","tipo","elemento","botonMenos","disabled","boton","includes","replace","incrementar","guardarFutbol","maxPartidos","maxSXJX","guardarSala","toggle_arbitros","arbitro_id"],"mappings":"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","file":"bundle.js","sourcesContent":["document.addEventListener('DOMContentLoaded', () => {\r\n    const dropButtons = document.querySelectorAll('.auto_aceptar');\r\n\r\n    dropButtons.forEach(button => {\r\n        button.addEventListener('click', async function (e) {\r\n            e.preventDefault();\r\n\r\n            const parentContainer = this.closest('.partidos__partido');\r\n            if (!parentContainer) {\r\n                alert('Error: No se pudo encontrar el contenedor del partido.');\r\n                return;\r\n            }\r\n\r\n            const inputElement = parentContainer.querySelector('input[name=\"id_arbi\"]');\r\n            if (!inputElement) {\r\n                alert('Error: No se encontrÃ³ el input del Ã¡rbitro.');\r\n                return;\r\n            }\r\n\r\n            const arbitroId = inputElement.value;\r\n            const partidoId = parentContainer.querySelector('input[name=\"id\"]').value;\r\n\r\n            // Guarda el ID del partido en localStorage\r\n            localStorage.setItem('scrollToPartidoId', partidoId);\r\n\r\n            try {\r\n                const respuesta = await fetch('/admin/partidos/autoaceptar', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify({ arbitro: arbitroId, partido: partidoId }),\r\n                });\r\n\r\n                const respuestaTexto = await respuesta.text();\r\n                try {\r\n                    const data = JSON.parse(respuestaTexto);\r\n\r\n                    if (respuesta.ok && data.success) {\r\n                        alert(data.message || 'Â¡Partido confirmado correctamente!');\r\n                        location.reload();\r\n                    } else {\r\n                        alert(data.message || 'Hubo un error al procesar la solicitud.');\r\n                    }\r\n                } catch (error) {\r\n                    console.error('Error al procesar la respuesta del servidor:', respuestaTexto, error);\r\n                    alert('Error en la comunicaciÃ³n con el servidor.');\r\n                }\r\n            } catch (error) {\r\n                console.error('Error en la comunicaciÃ³n con el servidor:', error);\r\n                alert('Error en la comunicaciÃ³n con el servidor.');\r\n            }\r\n        });\r\n    });\r\n\r\n    // Desplazarse al partido guardado despuÃ©s de recargar\r\n    const storedPartidoId = localStorage.getItem('scrollToPartidoId');\r\n    if (storedPartidoId) {\r\n        const partidoElement = document.querySelector(`.partidos__partido[data-partido-id=\"${storedPartidoId}\"]`);\r\n        if (partidoElement) {\r\n            partidoElement.scrollIntoView({ behavior: 'smooth', block: 'start' });\r\n        }\r\n        localStorage.removeItem('scrollToPartidoId');\r\n    }\r\n});\r\n","document.addEventListener('DOMContentLoaded', () => {\r\n    const dropButtons = document.querySelectorAll('.borrar');\r\n\r\n    dropButtons.forEach(button => {\r\n        button.addEventListener('click', async function (e) {\r\n            e.preventDefault();\r\n\r\n            const parentContainer = this.closest('.partidos__partido');\r\n            if (!parentContainer) {\r\n                alert('Error: No se pudo encontrar el contenedor del partido.');\r\n                return;\r\n            }\r\n\r\n            const inputElement = parentContainer.querySelector('input[name=\"id_arbi\"]');\r\n            if (!inputElement) {\r\n                alert('Error: No se encontrÃ³ el input del Ã¡rbitro.');\r\n                return;\r\n            }\r\n\r\n            const arbitroId = inputElement.value;\r\n            const partidoId = parentContainer.querySelector('input[name=\"id\"]').value;\r\n\r\n            // Guarda el ID del partido en localStorage\r\n            localStorage.setItem('scrollToPartidoId', partidoId);\r\n\r\n            try {\r\n                const respuesta = await fetch('/admin/partidos/borrar_nombramiento', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify({ arbitro: arbitroId, partido: partidoId }),\r\n                });\r\n\r\n                const respuestaTexto = await respuesta.text();\r\n                try {\r\n                    const data = JSON.parse(respuestaTexto);\r\n\r\n                    if (respuesta.ok && data.success) {\r\n                        alert(data.message || 'Â¡Ãrbitro borrado correctamente!');\r\n                        location.reload();\r\n                    } else {\r\n                        alert(data.message || 'Hubo un error al procesar la solicitud.');\r\n                    }\r\n                } catch (error) {\r\n                    console.error('Error al procesar la respuesta del servidor:', respuestaTexto, error);\r\n                    alert('Error en la comunicaciÃ³n con el servidor.');\r\n                }\r\n            } catch (error) {\r\n                console.error('Error en la comunicaciÃ³n con el servidor:', error);\r\n                alert('Error en la comunicaciÃ³n con el servidor.');\r\n            }\r\n        });\r\n    });\r\n\r\n    // Desplazarse al partido guardado despuÃ©s de recargar\r\n    const storedPartidoId = localStorage.getItem('scrollToPartidoId');\r\n    if (storedPartidoId) {\r\n        const partidoElement = document.querySelector(`.partidos__partido[data-partido-id=\"${storedPartidoId}\"]`);\r\n        if (partidoElement) {\r\n            partidoElement.scrollIntoView({ behavior: 'smooth', block: 'start' });\r\n        }\r\n        localStorage.removeItem('scrollToPartidoId');\r\n    }\r\n});\r\n","document.addEventListener('DOMContentLoaded', function () {\r\n    const scrollButtons = document.querySelector('.botones__scroll');\r\n    const mediaQuery = window.matchMedia('(min-width: 600px)');\r\n    let isScrolling;\r\n\r\n    // Mostrar los botones inicialmente\r\n    scrollButtons.style.top = '43.2rem';\r\n    scrollButtons.style.bottom = 'auto';\r\n\r\n    // Escuchar el evento de scroll\r\n    window.addEventListener('scroll', function () {\r\n        const scrollTop = window.scrollY; // Cantidad de scroll hacia abajo\r\n        const scrollHeight = document.documentElement.scrollHeight; // Altura total del documento\r\n        const clientHeight = document.documentElement.clientHeight; // Altura visible del viewport\r\n        const tolerance = 5; // Tolerancia de 5px para detectar el final\r\n        const isBottom = scrollTop + clientHeight >= scrollHeight - tolerance;\r\n        const isTop = scrollTop === 0; // Verificar si estamos arriba del todo\r\n\r\n        if (isTop) {\r\n            console.log('Estamos en la parte superior');\r\n            scrollButtons.style.top = '43.2rem';\r\n            scrollButtons.style.bottom = 'auto';\r\n        } else if (isBottom) {\r\n            console.log('Estamos en la parte inferior');\r\n            scrollButtons.style.bottom = mediaQuery.matches ? '8rem' : '16rem';\r\n            scrollButtons.style.top = 'auto';\r\n        } else {\r\n            console.log('Estamos desplazÃ¡ndonos');\r\n            scrollButtons.style.top = 'auto';\r\n            scrollButtons.style.bottom = '2rem';\r\n        }\r\n\r\n        scrollButtons.classList.add('hidden');\r\n\r\n        clearTimeout(isScrolling);\r\n        isScrolling = setTimeout(() => {\r\n            scrollButtons.classList.remove('hidden');\r\n        }, 300);\r\n    });\r\n\r\n    // FunciÃ³n de desplazamiento suave con duraciÃ³n ajustada por tamaÃ±o de pantalla\r\n    const smoothScroll = (targetY, duration) => {\r\n        const startY = window.scrollY; // PosiciÃ³n inicial\r\n        const distance = targetY - startY; // Distancia a desplazar\r\n        const startTime = performance.now(); // Tiempo inicial\r\n\r\n        const easeInOutQuad = (t) => t < 0.5 ? 2 * t * t : 1 - Math.pow(-2 * t + 2, 2) / 2;\r\n\r\n        const animateScroll = (currentTime) => {\r\n            const timeElapsed = currentTime - startTime;\r\n            const progress = Math.min(timeElapsed / duration, 1); // Limitar el progreso entre 0 y 1\r\n            const easedProgress = easeInOutQuad(progress); // Aplicar easing\r\n\r\n            window.scrollTo(0, startY + distance * easedProgress);\r\n\r\n            if (timeElapsed < duration) {\r\n                requestAnimationFrame(animateScroll);\r\n            }\r\n        };\r\n\r\n        requestAnimationFrame(animateScroll);\r\n    };\r\n\r\n    // Funcionalidad de los botones con velocidad ajustada\r\n    const scrollUpButton = document.getElementById('arriba');\r\n    const scrollDownButton = document.getElementById('abajo');\r\n\r\n    scrollUpButton.addEventListener('click', () => {\r\n        const duration = mediaQuery.matches ? 1000 : 2000; // 1000ms para >= 760px, 2000ms para < 760px\r\n        smoothScroll(0, duration);\r\n    });\r\n\r\n    scrollDownButton.addEventListener('click', () => {\r\n        const duration = mediaQuery.matches ? 1000 : 2000; // 1000ms para >= 760px, 2000ms para < 760px\r\n        smoothScroll(document.body.scrollHeight, duration);\r\n    });\r\n});\r\n","\r\ndocument.addEventListener('DOMContentLoaded', function () {\r\n    // Contar los Ã¡rbitros visibles en la pantalla\r\n    function contarArbitros() {\r\n        // Obtenemos todos los contenedores de Ã¡rbitros\r\n        const arbitrosVisibles = document.querySelectorAll('.arbitros__card');\r\n\r\n        // Actualizamos el contador en la pantalla\r\n        const contarElement = document.querySelector('.contar_arbitros h3');\r\n        contarElement.textContent = `${arbitrosVisibles.length} personas`;\r\n    }\r\n\r\n    // Llamamos a contarArbitros para mostrar el nÃºmero al cargar la pÃ¡gina\r\n    contarArbitros();\r\n\r\n    // Event listener para cuando los filtros cambien\r\n    const filtros = document.querySelectorAll('input[type=\"text\"], input[type=\"radio\"], button');\r\n\r\n    filtros.forEach(filtro => {\r\n        filtro.addEventListener('change', function () {\r\n            // Llamamos nuevamente a contarArbitros cuando se cambien los filtros\r\n            contarArbitros();\r\n        });\r\n    });\r\n});\r\n\r\n","document.addEventListener('DOMContentLoaded', function () {\r\n    // Contar los partidos visibles en la pantalla\r\n    function contarPartidos() {\r\n        // Obtenemos todos los contenedores de partidos visibles que NO son filtros\r\n        const partidosVisibles = document.querySelectorAll('.partidos__partido');\r\n        const partidosFiltrados = Array.from(partidosVisibles).filter(partido => {\r\n            return partido.offsetParent !== null && \r\n                   !partido.classList.contains('partidos__filtro') && \r\n                   partido.querySelector('.partidos__partido--id');\r\n        });\r\n\r\n        // Actualizamos el contador en la pantalla\r\n        const contarElement = document.querySelector('.contar_partidos h3');\r\n        contarElement.textContent = `${partidosFiltrados.length} partidos`;\r\n    }\r\n\r\n    // Llamamos a contarPartidos para mostrar el nÃºmero al cargar la pÃ¡gina\r\n    contarPartidos();\r\n\r\n    // Event listener para cuando los filtros cambien\r\n    const filtros = document.querySelectorAll('input[type=\"text\"], input[type=\"radio\"], select, button.partidos__boton-filtro');\r\n\r\n    filtros.forEach(filtro => {\r\n        filtro.addEventListener('change', function () {\r\n            // Llamamos nuevamente a contarPartidos cuando se cambien los filtros\r\n            contarPartidos();\r\n        });\r\n    });\r\n\r\n    // ValidaciÃ³n para el botÃ³n \"Borrar filtros\"\r\n    const botonRestablecer = document.querySelector('.partidos__boton-filtro');\r\n    if (botonRestablecer) {\r\n        botonRestablecer.addEventListener('click', function () {\r\n            // Limpiamos los filtros\r\n            document.querySelectorAll('input[type=\"text\"]').forEach(input => input.value = '');\r\n            document.querySelectorAll('input[type=\"radio\"]').forEach(radio => radio.checked = false);\r\n            document.querySelectorAll('select').forEach(select => select.selectedIndex = 0);\r\n\r\n            // Recontamos los partidos visibles\r\n            contarPartidos();\r\n        });\r\n    }\r\n});\r\n\r\n","// document.addEventListener('DOMContentLoaded', () => {\r\n//     const sendButtons = document.querySelectorAll('.send');\r\n\r\n//     sendButtons.forEach(button => {\r\n//         button.addEventListener('click', async function (e) {\r\n//             e.preventDefault();\r\n\r\n//             const parentContainer = this.closest('.partidos__partido');\r\n//             if (!parentContainer) {\r\n//                 alert('Error: No se pudo encontrar el contenedor del partido.');\r\n//                 return;\r\n//             }\r\n\r\n//             const inputElement = parentContainer.querySelector('input[name=\"id_arbi\"]');\r\n//             if (!inputElement) {\r\n//                 alert('Error: No se encontrÃ³ el input del Ã¡rbitro.');\r\n//                 return;\r\n//             }\r\n\r\n//             const arbitroId = inputElement.value;\r\n//             const partidoId = parentContainer.querySelector('input[name=\"id\"]').value;\r\n\r\n//             await enviarSolicitud(partidoId, arbitroId);\r\n\r\n//             async function enviarSolicitud(partidoId, arbitroId) {\r\n//                 try {\r\n//                     const respuesta = await fetch('/admin/partidos/enviar_partido', {\r\n//                         method: 'POST',\r\n//                         headers: {\r\n//                             'Content-Type': 'application/json',\r\n//                         },\r\n//                         body: JSON.stringify({ arbitro: arbitroId, partido: partidoId }),\r\n//                     });\r\n\r\n//                     if (!respuesta.ok) {\r\n//                         alert('Error en el servidor.');\r\n//                         return;\r\n//                     }\r\n\r\n//                     const data = await respuesta.json();\r\n\r\n//                     if (data.success) {\r\n//                         alert(data.message || 'Â¡Partido designado y enviado!');\r\n\r\n//                         // Actualiza el nombre del Ã¡rbitro si hay un contenedor especÃ­fico\r\n//                         const arbitroNombre = inputElement.getAttribute('data-arbitro-nombre') || 'Ãrbitro asignado';\r\n//                         const partidoArbitroContainer = parentContainer.querySelector('.partidos__partido--arbitro');\r\n//                         if (partidoArbitroContainer) {\r\n//                             partidoArbitroContainer.innerHTML = `\r\n//                                 <span class=\"arbitro-nombre\">${arbitroNombre}</span>\r\n//                             `;\r\n//                         }\r\n\r\n//                         // Actualiza la imagen dentro del <picture>\r\n//                         const pictureElement = parentContainer.querySelector('picture');\r\n//                         if (pictureElement) {\r\n//                             const estadoImage = pictureElement.querySelector('#send');\r\n//                             if (estadoImage) {\r\n//                                 estadoImage.src = \"/build/img/nombrado.png\";\r\n//                                 estadoImage.alt = \"BotÃ³n para nombrar\";\r\n\r\n//                                 // Actualiza los atributos `srcset` en <source>\r\n//                                 const sources = pictureElement.querySelectorAll('source');\r\n//                                 sources.forEach(source => {\r\n//                                     const type = source.getAttribute('type');\r\n//                                     if (type === 'image/avif') {\r\n//                                         source.srcset = \"/build/img/nombrado.avif\";\r\n//                                     } else if (type === 'image/webp') {\r\n//                                         source.srcset = \"/build/img/nombrado.webp\";\r\n//                                     }\r\n//                                 });\r\n//                             }\r\n//                         }\r\n//                     } else {\r\n//                         alert(data.message || 'Hubo un error al enviar los datos.');\r\n//                     }\r\n//                 } catch (error) {\r\n//                     console.error('Error en la comunicaciÃ³n con el servidor:', error);\r\n//                     alert('Error en la comunicaciÃ³n con el servidor.');\r\n//                 }\r\n//             }\r\n//         });\r\n//     });\r\n\r\n//     // Manejo de desplazamiento al partido desde la URL\r\n//     const urlParams = new URLSearchParams(window.location.search);\r\n//     const partidoId = urlParams.get('partidoId');\r\n\r\n//     if (partidoId) {\r\n//         const partidoElement = document.querySelector(`.partidos__partido[data-partido-id=\"${partidoId}\"]`);\r\n//         if (partidoElement) {\r\n//             partidoElement.scrollIntoView({ behavior: 'smooth', block: 'start' });\r\n//             const newUrl = window.location.href.split('?')[0];\r\n//             window.history.replaceState({}, document.title, newUrl);\r\n//         }\r\n//     }\r\n// });\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    const sendButtons = document.querySelectorAll('.send');\r\n\r\n    sendButtons.forEach(button => {\r\n        button.addEventListener('click', async function (e) {\r\n            e.preventDefault();\r\n\r\n            const parentContainer = this.closest('.partidos__partido');\r\n            if (!parentContainer) {\r\n                alert('Error: No se pudo encontrar el contenedor del partido.');\r\n                return;\r\n            }\r\n\r\n            const inputElement = parentContainer.querySelector('input[name=\"id_arbi\"]');\r\n            if (!inputElement) {\r\n                alert('Error: No se encontrÃ³ el input del Ã¡rbitro.');\r\n                return;\r\n            }\r\n\r\n            const arbitroId = inputElement.value;\r\n            const partidoId = parentContainer.querySelector('input[name=\"id\"]').value;\r\n\r\n            // Guarda el ID del partido en localStorage\r\n            localStorage.setItem('scrollToPartidoId', partidoId);\r\n\r\n            await enviarSolicitud(partidoId, arbitroId);\r\n\r\n            async function enviarSolicitud(partidoId, arbitroId) {\r\n                try {\r\n                    const respuesta = await fetch('/admin/partidos/enviar_partido', {\r\n                        method: 'POST',\r\n                        headers: {\r\n                            'Content-Type': 'application/json',\r\n                        },\r\n                        body: JSON.stringify({ arbitro: arbitroId, partido: partidoId }),\r\n                    });\r\n\r\n                    if (!respuesta.ok) {\r\n                        alert('Error en el servidor.');\r\n                        return;\r\n                    }\r\n\r\n                    const data = await respuesta.json();\r\n\r\n                    if (data.success) {\r\n                        alert(data.message || 'Â¡Partido designado y enviado!');\r\n\r\n                        // Recarga la pÃ¡gina para reflejar los cambios\r\n                        location.reload();\r\n                    } else {\r\n                        alert(data.message || 'Hubo un error al enviar los datos.');\r\n                    }\r\n                } catch (error) {\r\n                    console.error('Error en la comunicaciÃ³n con el servidor:', error);\r\n                    alert('Error en la comunicaciÃ³n con el servidor.');\r\n                }\r\n            }\r\n        });\r\n    });\r\n\r\n    // Desplazarse al partido guardado despuÃ©s de recargar\r\n    const storedPartidoId = localStorage.getItem('scrollToPartidoId');\r\n    if (storedPartidoId) {\r\n        const partidoElement = document.querySelector(`.partidos__partido[data-partido-id=\"${storedPartidoId}\"]`);\r\n        if (partidoElement) {\r\n            partidoElement.scrollIntoView({ behavior: 'smooth', block: 'start' });\r\n        }\r\n        // Eliminar el ID del localStorage una vez usado\r\n        localStorage.removeItem('scrollToPartidoId');\r\n    }\r\n});\r\n","document.addEventListener('DOMContentLoaded', function () {\r\n    const iconosRechazado = document.querySelectorAll('.negacion');\r\n\r\n    // Crear el modal dinÃ¡micamente\r\n    const modal = document.createElement('div');\r\n    modal.classList.add('modal-hover');\r\n    document.body.appendChild(modal);\r\n\r\n    iconosRechazado.forEach(icon => {\r\n        icon.addEventListener('mouseenter', function (e) {\r\n            mostrarModal(e, icon);\r\n        });\r\n\r\n        icon.addEventListener('mouseleave', function () {\r\n            ocultarModal();\r\n        });\r\n    });\r\n\r\n    /**\r\n     * Mostrar Modal al Hover\r\n     * @param {Event} e - Evento de mouse\r\n     * @param {Element} icon - Elemento sobre el que se hizo hover\r\n     */\r\n    function mostrarModal(e, icon) {\r\n        const rect = icon.getBoundingClientRect();\r\n        const observaciones = icon.getAttribute('data-observaciones') || 'Sin observaciones';\r\n\r\n        modal.textContent = observaciones; // Mostrar el valor Ãºnico de observaciones\r\n        modal.style.left = `${rect.left + window.scrollX - 10}px`;\r\n        modal.style.top = `${rect.top + window.scrollY - 5}px`;\r\n\r\n        modal.style.display = 'block';\r\n    }\r\n\r\n    /**\r\n     * Ocultar Modal al salir del Hover\r\n     */\r\n    function ocultarModal() {\r\n        modal.style.display = 'none';\r\n    }\r\n});\r\n","document.addEventListener('DOMContentLoaded', () => {\r\n    const saveButtons = document.querySelectorAll('.save');\r\n\r\n    saveButtons.forEach(button => {\r\n        button.addEventListener('click', async function (e) {\r\n            e.preventDefault();\r\n\r\n            const parentContainer = this.closest('.partidos__partido');\r\n            if (!parentContainer) {\r\n                alert('Error: No se pudo encontrar el contenedor del partido.');\r\n                return;\r\n            }\r\n\r\n            const partidoArbitroContainer = parentContainer.querySelector('.partidos__partido--arbitro');\r\n            if (!partidoArbitroContainer) {\r\n                alert('Error: No se encontrÃ³ el input del Ã¡rbitro.');\r\n                return;\r\n            }\r\n\r\n            const inputElement = partidoArbitroContainer.querySelector('.arbitro_autocomplete');\r\n            if (!inputElement || !inputElement.hasAttribute('data-arbitro-id')) {\r\n                alert('Por favor, selecciona un Ã¡rbitro de la lista antes de guardar.');\r\n                return;\r\n            }\r\n\r\n            const arbitroId = inputElement.getAttribute('data-arbitro-id');\r\n            const partidoId = this.closest('form').querySelector('input[name=\"id\"]').value;\r\n\r\n            // Guarda el ID del partido en localStorage\r\n            localStorage.setItem('scrollToPartidoId', partidoId);\r\n\r\n            await enviarSolicitud(partidoId, arbitroId);\r\n\r\n            async function enviarSolicitud(partidoId, arbitroId) {\r\n                try {\r\n                    const respuesta = await fetch('/admin/partidos/nombrar', {\r\n                        method: 'POST',\r\n                        headers: {\r\n                            'Content-Type': 'application/json',\r\n                        },\r\n                        body: JSON.stringify({ arbitro: arbitroId, partido: partidoId }),\r\n                    });\r\n\r\n                    const respuestaTexto = await respuesta.text();\r\n\r\n                    if (!respuesta.ok) {\r\n                        alert('Error en el servidor.');\r\n                        return;\r\n                    }\r\n\r\n                    const data = JSON.parse(respuestaTexto);\r\n\r\n                    if (data.success) {\r\n                        const successMessage = data.message || 'Â¡Ãrbitro guardado correctamente!';\r\n                        alert(successMessage);\r\n\r\n                        // Recarga la pÃ¡gina para reflejar los cambios\r\n                        location.reload();\r\n                    } else {\r\n                        alert(data.message || 'Hubo un error al guardar los datos.');\r\n                    }\r\n                } catch (error) {\r\n                    alert('Error en la comunicaciÃ³n con el servidor.');\r\n                }\r\n            }\r\n        });\r\n    });\r\n\r\n    // Desplazarse al partido guardado despuÃ©s de recargar\r\n    const storedPartidoId = localStorage.getItem('scrollToPartidoId');\r\n    if (storedPartidoId) {\r\n        const partidoElement = document.querySelector(`.partidos__partido[data-partido-id=\"${storedPartidoId}\"]`);\r\n        if (partidoElement) {\r\n            partidoElement.scrollIntoView({ behavior: 'smooth', block: 'start' });\r\n        }\r\n        // Eliminar el ID del localStorage una vez usado\r\n        localStorage.removeItem('scrollToPartidoId');\r\n    }\r\n});\r\n","// document.addEventListener('DOMContentLoaded', function () {\r\n//     // DelegaciÃ³n de eventos: aplicar a todos los inputs con la clase 'arbitro_autocomplete'\r\n//     document.body.addEventListener('input', function (event) {\r\n//         // Verificar si el evento es para un input con id 'arbitro_autocomplete'\r\n//         if (event.target && event.target.id === 'arbitro_autocomplete') {\r\n//             const input = event.target;\r\n//             const suggestionsList = input.nextElementSibling; // La lista de sugerencias estÃ¡ justo despuÃ©s del input\r\n//             const query = input.value.trim();\r\n\r\n//             // Log para asegurarnos de que el evento se estÃ¡ disparando correctamente\r\n//             console.log('Evento de input detectado para:', input.id);\r\n\r\n//             // Realizar bÃºsqueda solo si hay al menos 2 caracteres\r\n//             if (query.length >= 2) {\r\n//                 console.log('Consultando Ã¡rbitros con la query:', query); // Verifica la consulta\r\n\r\n//                 // Realizar una peticiÃ³n AJAX al servidor para obtener los Ã¡rbitros que coinciden\r\n//                 fetch(`/admin/partidos/autocompletar_arbitros`, {\r\n//                     method: 'POST',\r\n//                     headers: {\r\n//                         'Content-Type': 'application/x-www-form-urlencoded',\r\n//                     },\r\n//                     body: `q=${encodeURIComponent(query)}` // Enviar la consulta con mÃºltiples palabras\r\n//                 })\r\n//                 .then(response => {\r\n//                     if (!response.ok) {\r\n//                         throw new Error('Error al obtener la respuesta del servidor');\r\n//                     }\r\n//                     return response.json();\r\n//                 })\r\n//                 .then(data => {\r\n//                     suggestionsList.innerHTML = ''; // Limpiar las sugerencias previas\r\n\r\n//                     if (data.length > 0) {\r\n//                         data.forEach(Ã¡rbitro => {\r\n//                             const li = document.createElement('li');\r\n//                             li.textContent = `${Ã¡rbitro.apellido1} ${Ã¡rbitro.apellido2}, ${Ã¡rbitro.nombre}`;\r\n//                             li.setAttribute('data-id', Ã¡rbitro.id);\r\n//                             suggestionsList.appendChild(li);\r\n\r\n//                             // AÃ±adir evento de selecciÃ³n al hacer clic en un Ã¡rbitro\r\n//                             li.addEventListener('click', function () {\r\n//                                 input.value = `${Ã¡rbitro.apellido1} ${Ã¡rbitro.apellido2}, ${Ã¡rbitro.nombre}`;\r\n//                                 input.setAttribute('data-arbitro-id', Ã¡rbitro.id); // Guardamos el id del Ã¡rbitro\r\n//                                 suggestionsList.innerHTML = ''; // Limpiar las sugerencias\r\n//                             });\r\n//                         });\r\n//                     } else {\r\n//                         suggestionsList.innerHTML = '<li>No se encontraron Ã¡rbitros.</li>';\r\n//                     }\r\n//                 })\r\n//                 .catch(error => {\r\n//                     console.error('Error al obtener los Ã¡rbitros:', error);\r\n//                     suggestionsList.innerHTML = `<li>Error: ${error.message}</li>`; // Mostrar el error en las sugerencias\r\n//                 });\r\n//             } else {\r\n//                 suggestionsList.innerHTML = ''; // Limpiar las sugerencias si el texto es menor de 2 caracteres\r\n//             }\r\n//         }\r\n//     });\r\n\r\n//     // Cerrar la lista de sugerencias al hacer clic fuera del input\r\n//     document.addEventListener('click', function (event) {\r\n//         if (!event.target.closest('.partidos__campo').contains(event.target)) {\r\n//             // Si el clic no es sobre el input ni sobre la lista de sugerencias\r\n//             const suggestionLists = document.querySelectorAll('.autocomplete-suggestions');\r\n//             suggestionLists.forEach(suggestionsList => {\r\n//                 suggestionsList.innerHTML = ''; // Limpiar todas las sugerencias\r\n//             });\r\n//         }\r\n//     });\r\n// });\r\n\r\n// Autocompletado de Ã¡rbitros\r\ndocument.addEventListener('DOMContentLoaded', function () {\r\n    // DelegaciÃ³n de eventos\r\n    document.body.addEventListener('input', function (event) {\r\n        if (event.target && event.target.id === 'arbitro_autocomplete') {\r\n            const input = event.target;\r\n            const suggestionsList = input.nextElementSibling; // La lista de sugerencias estÃ¡ despuÃ©s del input\r\n            const query = input.value.trim();\r\n\r\n            // BÃºsqueda solo si hay 2 o mÃ¡s caracteres\r\n            if (query.length >= 2) {\r\n                fetch(`/admin/partidos/autocompletar_arbitros`, {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/x-www-form-urlencoded',\r\n                    },\r\n                    body: `q=${encodeURIComponent(query)}`\r\n                })\r\n                .then(response => {\r\n                    if (!response.ok) {\r\n                        throw new Error(`Error HTTP: ${response.status}`);\r\n                    }\r\n                    return response.json();\r\n                })\r\n                .then(data => {\r\n                    console.log('Respuesta del servidor:', data); // DepuraciÃ³n\r\n                    suggestionsList.innerHTML = ''; // Limpiar sugerencias\r\n\r\n                    if (data.length > 0) {\r\n                        data.forEach(Ã¡rbitro => {\r\n                            const li = document.createElement('li');\r\n                            li.textContent = `${Ã¡rbitro.apellido1} ${Ã¡rbitro.apellido2}, ${Ã¡rbitro.nombre}`;\r\n                            li.setAttribute('data-id', Ã¡rbitro.id);\r\n                            suggestionsList.appendChild(li);\r\n\r\n                            li.addEventListener('click', function () {\r\n                                input.value = `${Ã¡rbitro.apellido1} ${Ã¡rbitro.apellido2}, ${Ã¡rbitro.nombre}`;\r\n                                input.setAttribute('data-arbitro-id', Ã¡rbitro.id);\r\n                                suggestionsList.innerHTML = '';\r\n                            });\r\n                        });\r\n                    } else {\r\n                        suggestionsList.innerHTML = '<li>No se encontraron Ã¡rbitros.</li>';\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    console.error('Error al obtener los Ã¡rbitros:', error);\r\n                    suggestionsList.innerHTML = `<li>Error: ${error.message}</li>`;\r\n                });\r\n            } else {\r\n                suggestionsList.innerHTML = ''; // Limpiar si hay menos de 2 caracteres\r\n            }\r\n        }\r\n    });\r\n\r\n    // Cerrar sugerencias al hacer clic fuera\r\n    document.addEventListener('click', function (event) {\r\n        if (!event.target.closest('.partidos__campo')) {\r\n            const suggestionLists = document.querySelectorAll('.autocomplete-suggestions');\r\n            suggestionLists.forEach(suggestionsList => {\r\n                suggestionsList.innerHTML = '';\r\n            });\r\n        }\r\n    });\r\n});\r\n","document.addEventListener('DOMContentLoaded', () => {\r\n    const button = document.querySelector('.alert');\r\n\r\n    const registrer_btn = document.querySelector('.alert');\r\n    registrer_btn.addEventListener('click', function () {\r\n        registrer_btn.classList.add('mostrar_sweet');\r\n        mostrar_alerta();\r\n        setTimeout(function () {\r\n            registrer_btn.classList.remove('mostrar_sweet');\r\n        }, 100)\r\n    });\r\n\r\n    function mostrar_alerta() {\r\n        Swal.fire({\r\n            icon: \"success\", // Ãcono de Ã©xito\r\n            title: \"Â¡Hecho!\", // Texto de Ã©xito\r\n            background: \"#4e4d4b\",  // Fondo personalizado de la alerta\r\n            color: \"#DDDDDD\",        // Color del texto\r\n            customClass: {\r\n                popup: 'custom-popup',     // Clase personalizada para el popup\r\n                title: 'custom-title',     // Clase personalizada para el tÃ­tulo\r\n                confirmButton: 'custom-button'  // Clase personalizada para el botÃ³n de confirmaciÃ³n\r\n            },\r\n            showConfirmButton: true, // Mostrar botÃ³n de confirmaciÃ³n\r\n            confirmButtonColor: \"#71B100\",  // Color para el botÃ³n de confirmaciÃ³n\r\n            timer: 3000, // Tiempo automÃ¡tico de cierre (opcional)\r\n        });\r\n    }\r\n});","document.addEventListener('DOMContentLoaded', () => {\r\n    const deleteButtons = document.querySelectorAll('.alert2'); // Selecciona todos los botones de eliminaciÃ³n\r\n\r\n    deleteButtons.forEach(button => {\r\n        button.addEventListener('click', function (e) {\r\n            const form = this.closest('form'); // ObtÃ©n el formulario asociado al botÃ³n\r\n            const itemId = form.querySelector('input[name=\"id\"]').value; // ObtÃ©n el ID desde el campo oculto\r\n\r\n            Swal.fire({\r\n                title: \"Al pulsar SÃ­, el contenido serÃ¡ eliminado, Â¿Desea confirmar?\",\r\n                showCancelButton: true,\r\n                confirmButtonText: \"SÃ­\",\r\n                cancelButtonText: \"No\",\r\n                confirmButtonColor: \"#71B100\",  // Color para el botÃ³n de confirmaciÃ³n\r\n                cancelButtonColor: \"#F05454\",   // Color para el botÃ³n de cancelaciÃ³n\r\n                backdrop: true,  // Oscurecer el fondo\r\n                background: \"#4e4d4b\",  // Fondo personalizado de la alerta\r\n                color: \"#DDDDDD\",        // Color del texto\r\n                icon: \"warning\",\r\n                customClass: {\r\n                    popup: 'custom-popup',     // Clase personalizada para el popup\r\n                    title: 'custom-title',     // Clase personalizada para el tÃ­tulo\r\n                    confirmButton: 'custom-button',  // Clase personalizada para el botÃ³n de confirmaciÃ³n\r\n                    cancelButton: 'custom-button'   // Clase personalizada para el botÃ³n de cancelaciÃ³n\r\n                }\r\n            }).then((result) => {\r\n                if (result.isConfirmed) {\r\n                    form.submit(); // EnvÃ­a el formulario si el usuario confirma\r\n                }\r\n            });\r\n        });\r\n    });\r\n\r\n    function mostrar_alerta() {\r\n        Swal.fire({\r\n            icon: \"success\",\r\n            title: \"Â¡Hecho!\"\r\n        });\r\n    }\r\n});\r\n","document.addEventListener('DOMContentLoaded', () => {\r\n    // Selecciona el botÃ³n de reset\r\n    const resetButton = document.querySelector('.alert3');\r\n\r\n    // AÃ±ade un evento de clic al botÃ³n\r\n    resetButton.addEventListener('click', function () {\r\n        // Muestra el cuadro de confirmaciÃ³n de SweetAlert\r\n        Swal.fire({\r\n            title: \"Al pulsar SÃ­, se eliminarÃ¡n todos los registros, Â¿Desea continuar?\",\r\n            showCancelButton: true,\r\n            confirmButtonText: \"SÃ­\",\r\n            cancelButtonText: \"No\",\r\n            confirmButtonColor: \"#71B100\",  // Color para el botÃ³n de confirmaciÃ³n\r\n            cancelButtonColor: \"#F05454\",   // Color para el botÃ³n de cancelaciÃ³n\r\n            backdrop: true,  // Oscurecer el fondo\r\n            background: \"#4e4d4b\",  // Fondo personalizado de la alerta\r\n            color: \"#DDDDDD\",        // Color del texto\r\n            icon: \"warning\",\r\n            customClass: {\r\n                popup: 'custom-popup',     // Clase personalizada para el popup\r\n                title: 'custom-title',     // Clase personalizada para el tÃ­tulo\r\n                confirmButton: 'custom-button',  // Clase personalizada para el botÃ³n de confirmaciÃ³n\r\n                cancelButton: 'custom-button'   // Clase personalizada para el botÃ³n de cancelaciÃ³n\r\n            }\r\n\r\n        }).then((result) => {\r\n            if (result.isConfirmed) {\r\n                // Si el usuario confirma, envÃ­a el formulario\r\n                const form = this.closest('form'); // ObtÃ©n el formulario asociado al botÃ³n\r\n                form.submit(); // EnvÃ­a el formulario para hacer el reset\r\n            }\r\n        });\r\n    });\r\n});\r\n","document.addEventListener('DOMContentLoaded', () => {\r\n    const deleteButtons = document.querySelectorAll('.alert4');\r\n\r\n    deleteButtons.forEach(button => {\r\n        button.addEventListener('click', function (e) {\r\n            e.preventDefault();\r\n\r\n            const form = this.closest('form');\r\n\r\n            Swal.fire({\r\n                title: \"Al pulsar SÃ­, el partido serÃ¡ eliminado, Â¿Desea confirmar?\",\r\n                showCancelButton: true,\r\n                confirmButtonText: \"SÃ­\",\r\n                cancelButtonText: \"No\",\r\n                confirmButtonColor: \"#71B100\",\r\n                cancelButtonColor: \"#F05454\",\r\n                backdrop: true,\r\n                background: \"#4e4d4b\",\r\n                color: \"#DDDDDD\",\r\n                icon: \"warning\"\r\n            }).then((result) => {\r\n                if (result.isConfirmed) {\r\n                    fetch(form.action, {\r\n                        method: 'POST',\r\n                        body: new FormData(form)\r\n                    })\r\n                        .then(response => response.json())\r\n                        .then(data => {\r\n                            if (data.success) {\r\n                                Swal.fire({\r\n                                    title: 'Eliminado',\r\n                                    text: 'El partido ha sido eliminado.',\r\n                                    icon: 'success',\r\n                                    confirmButtonText: \"Aceptar\",\r\n                                    confirmButtonColor: \"#71B100\",\r\n                                    background: \"#4e4d4b\",  // Fondo personalizado de la alerta\r\n                                    color: \"#DDDDDD\",  // Color del texto\r\n                                    customClass: {\r\n                                        popup: 'custom-popup',  // Clase personalizada para el popup\r\n                                        title: 'custom-title',  // Clase personalizada para el tÃ­tulo\r\n                                        confirmButton: 'custom-button',  // Clase personalizada para el botÃ³n de confirmaciÃ³n\r\n                                    }\r\n                                }).then(() => {\r\n                                    window.location.href = '/admin/partidos'; // Redirige al usuario\r\n                                });\r\n                            } else {\r\n                                Swal.fire({\r\n                                    title: 'Error',\r\n                                    text: data.message,\r\n                                    icon: 'error',\r\n                                    confirmButtonText: \"Aceptar\",\r\n                                    confirmButtonColor: \"#F05454\",\r\n                                    background: \"#4e4d4b\",  // Fondo personalizado de la alerta\r\n                                    color: \"#DDDDDD\",  // Color del texto\r\n                                    customClass: {\r\n                                        popup: 'custom-popup',  // Clase personalizada para el popup\r\n                                        title: 'custom-title',  // Clase personalizada para el tÃ­tulo\r\n                                        confirmButton: 'custom-button',  // Clase personalizada para el botÃ³n de confirmaciÃ³n\r\n                                    }\r\n                                });\r\n                            }\r\n                        })\r\n                        .catch(error => {\r\n                            Swal.fire({\r\n                                title: 'Error',\r\n                                text: 'Algo saliÃ³ mal.',\r\n                                icon: 'error',\r\n                                confirmButtonText: \"Aceptar\",\r\n                                confirmButtonColor: \"#F05454\",\r\n                                background: \"#4e4d4b\",  // Fondo personalizado de la alerta\r\n                                color: \"#DDDDDD\",  // Color del texto\r\n                                customClass: {\r\n                                    popup: 'custom-popup',  // Clase personalizada para el popup\r\n                                    title: 'custom-title',  // Clase personalizada para el tÃ­tulo\r\n                                    confirmButton: 'custom-button',  // Clase personalizada para el botÃ³n de confirmaciÃ³n\r\n                                }\r\n                            });\r\n                        });\r\n                }\r\n            });\r\n        });\r\n    });\r\n});\r\n","document.addEventListener('DOMContentLoaded', () => {\r\n    const deleteButtons = document.querySelectorAll('.alert5');\r\n\r\n    deleteButtons.forEach(button => {\r\n        button.addEventListener('click', function (e) {\r\n            e.preventDefault();\r\n\r\n            const form = this.closest('form');\r\n\r\n            Swal.fire({\r\n                title: \"Al pulsar SÃ­, la categorÃ­a serÃ¡ eliminada, Â¿Desea confirmar?\",\r\n                showCancelButton: true,\r\n                confirmButtonText: \"SÃ­\",\r\n                cancelButtonText: \"No\",\r\n                confirmButtonColor: \"#71B100\",\r\n                cancelButtonColor: \"#F05454\",\r\n                backdrop: true,\r\n                background: \"#4e4d4b\",\r\n                color: \"#DDDDDD\",\r\n                icon: \"warning\"\r\n            }).then((result) => {\r\n                if (result.isConfirmed) {\r\n                    fetch(form.action, {\r\n                        method: 'POST',\r\n                        body: new FormData(form)\r\n                    })\r\n                        .then(response => response.json())\r\n                        .then(data => {\r\n                            if (data.success) {\r\n                                Swal.fire({\r\n                                    title: 'Eliminado',\r\n                                    text: 'La categorÃ­a ha sido eliminada.',\r\n                                    icon: 'success',\r\n                                    confirmButtonText: \"Aceptar\",\r\n                                    confirmButtonColor: \"#71B100\",\r\n                                    background: \"#4e4d4b\",  // Fondo personalizado de la alerta\r\n                                    color: \"#DDDDDD\",  // Color del texto\r\n                                    customClass: {\r\n                                        popup: 'custom-popup',  // Clase personalizada para el popup\r\n                                        title: 'custom-title',  // Clase personalizada para el tÃ­tulo\r\n                                        confirmButton: 'custom-button',  // Clase personalizada para el botÃ³n de confirmaciÃ³n\r\n                                    }\r\n                                }).then(() => {\r\n                                    window.location.href = '/admin/categorias'; // Redirige al usuario\r\n                                });\r\n                            } else {\r\n                                Swal.fire({\r\n                                    title: 'Error',\r\n                                    text: data.message,\r\n                                    icon: 'error',\r\n                                    confirmButtonText: \"Aceptar\",\r\n                                    confirmButtonColor: \"#F05454\",\r\n                                    background: \"#4e4d4b\",  // Fondo personalizado de la alerta\r\n                                    color: \"#DDDDDD\",  // Color del texto\r\n                                    customClass: {\r\n                                        popup: 'custom-popup',  // Clase personalizada para el popup\r\n                                        title: 'custom-title',  // Clase personalizada para el tÃ­tulo\r\n                                        confirmButton: 'custom-button',  // Clase personalizada para el botÃ³n de confirmaciÃ³n\r\n                                    }\r\n                                });\r\n                            }\r\n                        })\r\n                        .catch(error => {\r\n                            Swal.fire({\r\n                                title: 'Error',\r\n                                text: 'Algo saliÃ³ mal.',\r\n                                icon: 'error',\r\n                                confirmButtonText: \"Aceptar\",\r\n                                confirmButtonColor: \"#F05454\",\r\n                                background: \"#4e4d4b\",  // Fondo personalizado de la alerta\r\n                                color: \"#DDDDDD\",  // Color del texto\r\n                                customClass: {\r\n                                    popup: 'custom-popup',  // Clase personalizada para el popup\r\n                                    title: 'custom-title',  // Clase personalizada para el tÃ­tulo\r\n                                    confirmButton: 'custom-button',  // Clase personalizada para el botÃ³n de confirmaciÃ³n\r\n                                }\r\n                            });\r\n                        });\r\n                }\r\n            });\r\n        });\r\n    });\r\n});\r\n","(function() {\r\n    document.querySelectorAll('.toogle_check').forEach(toggle => {\r\n        toggle.addEventListener('change', async function () {\r\n            const userId = this.getAttribute('data-id');\r\n            const isActive = this.checked ? 1 : 0;\r\n\r\n            try {\r\n                const response = await fetch('/admin/perfiles/actualizar-estado', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify({ id: userId, activo: isActive }),\r\n                });\r\n\r\n                const result = await response.json();\r\n                if (!result.success) {\r\n                    alert('Error actualizando el estado');\r\n                    this.checked = !this.checked; // Revertir si hay error\r\n                }\r\n            } catch (error) {\r\n                alert('Error en el servidor');\r\n                this.checked = !this.checked; // Revertir si hay error\r\n            }\r\n        });\r\n    });\r\n})();\r\n","// // InicializaciÃ³n de valores\r\n// const valores = {\r\n//     'futbol-partidos': null,\r\n//     'futbol-sxjx': null,\r\n//     'sala-partidos': null,\r\n//     'sala-sxjx': null\r\n// };\r\n\r\n// // Actualizar el valor en el HTML\r\n// function actualizarNumero(tipo) {\r\n//     const elemento = document.getElementById(tipo);\r\n//     const botonMenos = document.getElementById(`menos-${tipo}`);\r\n//     if (valores[tipo] === null) {\r\n//         elemento.textContent = '-'; // Mostrar \"-\" si el valor es null\r\n//         botonMenos.disabled = true; // Deshabilitar botÃ³n de \"menos\"\r\n//     } else {\r\n//         elemento.textContent = valores[tipo];\r\n//         botonMenos.disabled = false; // Habilitar botÃ³n de \"menos\"\r\n//     }\r\n// }\r\n\r\n// // Funciones para incrementar y decrementar\r\n// function decrementar(tipo) {\r\n//     if (valores[tipo] === 1) {\r\n//         valores[tipo] = null; // Cambia a null si llega a 1 y se reduce\r\n//     } else if (valores[tipo] !== null) {\r\n//         valores[tipo]--;\r\n//     }\r\n//     actualizarNumero(tipo);\r\n// }\r\n\r\n// function incrementar(tipo) {\r\n//     if (valores[tipo] === null) {\r\n//         valores[tipo] = 1; // Inicializa desde null a 1 si se hace clic en mÃ¡s\r\n//     } else {\r\n//         valores[tipo]++;\r\n//     }\r\n//     actualizarNumero(tipo);\r\n// }\r\n\r\n// // AÃ±adir eventos a los botones de mÃ¡s y menos para FÃºtbol\r\n// document.getElementById('menos-futbol-partidos').addEventListener('click', (event) => {\r\n//     event.preventDefault(); // Evita comportamientos por defecto\r\n//     decrementar('futbol-partidos');\r\n// });\r\n\r\n// document.getElementById('mas-futbol-partidos').addEventListener('click', (event) => {\r\n//     event.preventDefault(); // Evita comportamientos por defecto\r\n//     incrementar('futbol-partidos');\r\n// });\r\n\r\n// document.getElementById('menos-futbol-sxjx').addEventListener('click', (event) => {\r\n//     event.preventDefault(); // Evita comportamientos por defecto\r\n//     decrementar('futbol-sxjx');\r\n// });\r\n\r\n// document.getElementById('mas-futbol-sxjx').addEventListener('click', (event) => {\r\n//     event.preventDefault(); // Evita comportamientos por defecto\r\n//     incrementar('futbol-sxjx');\r\n// });\r\n\r\n// // BotÃ³n guardar para FÃºtbol\r\n// document.getElementById('guardar-futbol').addEventListener('click', () => {\r\n//     const datos = {\r\n//         tipo: 'futbol',\r\n//         maxPartidos: valores['futbol-partidos'] === null ? '-' : valores['futbol-partidos'],\r\n//         maxSXJX: valores['futbol-sxjx'] === null ? '-' : valores['futbol-sxjx']\r\n//     };\r\n\r\n//     fetch('/admin/acciones/guardar_futbol', {\r\n//         method: 'POST',\r\n//         headers: { 'Content-Type': 'application/json' },\r\n//         body: JSON.stringify(datos)\r\n//     })\r\n//         .then(response => {\r\n//             if (!response.ok) {\r\n//                 throw new Error('Error en la solicitud');\r\n//             }\r\n//             return response.json();\r\n//         })\r\n//         .then(data => {\r\n//             if (data.success) {\r\n//                 alert(data.message || 'RestricciÃ³n aplicada con Ã©xito.');\r\n//             } else {\r\n//                 alert(data.message || 'Error al guardar los datos de FÃºtbol.');\r\n//             }\r\n//         })\r\n//         .catch(error => {\r\n//             console.error('Error:', error);\r\n//             alert('OcurriÃ³ un error al procesar la solicitud.');\r\n//         });\r\n// });\r\n\r\n// // AÃ±adir eventos a los botones de mÃ¡s y menos para Sala\r\n// document.getElementById('menos-sala-partidos').addEventListener('click', (event) => {\r\n//     event.preventDefault(); // Evita comportamientos por defecto\r\n//     decrementar('sala-partidos');\r\n// });\r\n\r\n// document.getElementById('mas-sala-partidos').addEventListener('click', (event) => {\r\n//     event.preventDefault(); // Evita comportamientos por defecto\r\n//     incrementar('sala-partidos');\r\n// });\r\n\r\n// document.getElementById('menos-sala-sxjx').addEventListener('click', (event) => {\r\n//     event.preventDefault(); // Evita comportamientos por defecto\r\n//     decrementar('sala-sxjx');\r\n// });\r\n\r\n// document.getElementById('mas-sala-sxjx').addEventListener('click', (event) => {\r\n//     event.preventDefault(); // Evita comportamientos por defecto\r\n//     incrementar('sala-sxjx');\r\n// });\r\n\r\n// // BotÃ³n guardar para Sala\r\n// document.getElementById('guardar-sala').addEventListener('click', () => {\r\n//     const datos = {\r\n//         tipo: 'sala',\r\n//         maxPartidos: valores['sala-partidos'] === null ? '-' : valores['sala-partidos'],\r\n//         maxSXJX: valores['sala-sxjx'] === null ? '-' : valores['sala-sxjx']\r\n//     };\r\n\r\n//     fetch('/admin/acciones/guardar_sala', {\r\n//         method: 'POST',\r\n//         headers: { 'Content-Type': 'application/json' },\r\n//         body: JSON.stringify(datos)\r\n//     })\r\n//         .then(response => {\r\n//             if (!response.ok) {\r\n//                 throw new Error('Error en la solicitud');\r\n//             }\r\n//             return response.json();\r\n//         })\r\n//         .then(data => {\r\n//             if (data.success) {\r\n//                 alert(data.message || 'RestricciÃ³n aplicada con Ã©xito');\r\n//             } else {\r\n//                 alert(data.message || 'Error al guardar los datos de Sala.');\r\n//             }\r\n//         })\r\n//         .catch(error => {\r\n//             console.error('Error:', error);\r\n//             alert('OcurriÃ³ un error al procesar la solicitud.');\r\n//         });\r\n// });\r\n\r\n// // Inicializar la vista con los valores actuales\r\n// actualizarNumero('futbol-partidos');\r\n// actualizarNumero('futbol-sxjx');\r\n// actualizarNumero('sala-partidos');\r\n// actualizarNumero('sala-sxjx');\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", function () {\r\n    // Comprobamos que la vista 2 estÃ¡ cargada buscando un elemento clave\r\n    if (document.querySelector('.ajustes')) {\r\n        const valores = {\r\n            'futbol-partidos': null,\r\n            'futbol-sxjx': null,\r\n            'sala-partidos': null,\r\n            'sala-sxjx': null\r\n        };\r\n\r\n        function actualizarNumero(tipo) {\r\n            const elemento = document.getElementById(tipo);\r\n            const botonMenos = document.getElementById(`menos-${tipo}`);\r\n            if (!elemento || !botonMenos) return; // Si no existe, no ejecutamos nada\r\n\r\n            if (valores[tipo] === null) {\r\n                elemento.textContent = '-';\r\n                botonMenos.disabled = true;\r\n            } else {\r\n                elemento.textContent = valores[tipo];\r\n                botonMenos.disabled = false;\r\n            }\r\n        }\r\n\r\n        function decrementar(tipo) {\r\n            if (valores[tipo] === 1) {\r\n                valores[tipo] = null;\r\n            } else if (valores[tipo] !== null) {\r\n                valores[tipo]--;\r\n            }\r\n            actualizarNumero(tipo);\r\n        }\r\n\r\n        function incrementar(tipo) {\r\n            if (valores[tipo] === null) {\r\n                valores[tipo] = 1;\r\n            } else {\r\n                valores[tipo]++;\r\n            }\r\n            actualizarNumero(tipo);\r\n        }\r\n\r\n        // Solo aÃ±adimos eventos si los botones existen\r\n        const botones = [\r\n            'menos-futbol-partidos', 'mas-futbol-partidos', 'menos-futbol-sxjx', 'mas-futbol-sxjx',\r\n            'menos-sala-partidos', 'mas-sala-partidos', 'menos-sala-sxjx', 'mas-sala-sxjx'\r\n        ];\r\n\r\n        botones.forEach(id => {\r\n            const boton = document.getElementById(id);\r\n            if (boton) {\r\n                boton.addEventListener('click', (event) => {\r\n                    event.preventDefault();\r\n                    if (id.includes('menos')) {\r\n                        decrementar(id.replace('menos-', ''));\r\n                    } else {\r\n                        incrementar(id.replace('mas-', ''));\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n        // Guardar datos de FÃºtbol\r\n        const guardarFutbol = document.getElementById('guardar-futbol');\r\n        if (guardarFutbol) {\r\n            guardarFutbol.addEventListener('click', () => {\r\n                fetch('/admin/acciones/guardar_futbol', {\r\n                    method: 'POST',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({\r\n                        tipo: 'futbol',\r\n                        maxPartidos: valores['futbol-partidos'] || '-',\r\n                        maxSXJX: valores['futbol-sxjx'] || '-'\r\n                    })\r\n                })\r\n                .then(response => response.json())\r\n                .then(data => alert(data.message || 'RestricciÃ³n aplicada con Ã©xito'))\r\n                .catch(error => console.error('Error:', error));\r\n            });\r\n        }\r\n\r\n        // Guardar datos de Sala\r\n        const guardarSala = document.getElementById('guardar-sala');\r\n        if (guardarSala) {\r\n            guardarSala.addEventListener('click', () => {\r\n                fetch('/admin/acciones/guardar_sala', {\r\n                    method: 'POST',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({\r\n                        tipo: 'sala',\r\n                        maxPartidos: valores['sala-partidos'] || '-',\r\n                        maxSXJX: valores['sala-sxjx'] || '-'\r\n                    })\r\n                })\r\n                .then(response => response.json())\r\n                .then(data => alert(data.message || 'RestricciÃ³n aplicada con Ã©xito'))\r\n                .catch(error => console.error('Error:', error));\r\n            });\r\n        }\r\n\r\n        // Inicializar los valores si los elementos existen\r\n        actualizarNumero('futbol-partidos');\r\n        actualizarNumero('futbol-sxjx');\r\n        actualizarNumero('sala-partidos');\r\n        actualizarNumero('sala-sxjx');\r\n    }\r\n});\r\n","// (function() {\r\n//     document.querySelectorAll('.check_arbis').forEach(toggle_arbitros => {\r\n//         toggle_arbitros.addEventListener('change', async function () {\r\n//             const arbitro_id = this.getAttribute('data-id');\r\n//             const activo = this.checked ? 1 : 0;\r\n\r\n//             // console.log(`Toggle changed for ID: ${arbitro_id}, Active: ${activo}`); // Para depuraciÃ³n\r\n\r\n//             try {\r\n//                 const respuesta = await fetch('/admin/arbitros/actualizar-estado', {\r\n//                     method: 'POST',\r\n//                     headers: {\r\n//                         'Content-Type': 'application/json',\r\n//                     },\r\n//                     body: JSON.stringify({ id: arbitro_id, activo: activo }),\r\n//                 });\r\n\r\n//                 // Verifica si la respuesta es exitosa\r\n//                 if (respuesta.ok) {\r\n//                     const resultado_arbis = await respuesta.json(); // Convierte la respuesta a JSON\r\n\r\n//                     // console.log('Respuesta recibida:', resultado_arbis); // DepuraciÃ³n\r\n\r\n//                     // Solo mostrar alerta si resultado_arbis.success es verdadero\r\n//                     if (resultado_arbis.success) {\r\n//                         // console.log('Estado actualizado con Ã©xito');\r\n//                         // alert('Estado actualizado con Ã©xito');\r\n                        \r\n//                         // Actualizar el estado visual en la UI inmediatamente\r\n//                         // Si el estado cambia a activo (1), el toggle se marca, si no, se desmarca.\r\n//                         this.checked = activo === 1; \r\n\r\n//                     } else {\r\n//                         // console.log('Hubo un error en el servidor al actualizar el estado');\r\n//                         alert('Error actualizando el estado');\r\n//                         // Si hubo un error, revertir el estado del checkbox\r\n//                         this.checked = !this.checked; \r\n//                     }\r\n//                 } else {\r\n//                     throw new Error('Error en la respuesta del servidor');\r\n//                 }\r\n//             } catch (error) {\r\n//                 console.error('Error en la comunicaciÃ³n con el servidor:', error);\r\n//                 alert('Error en el servidor');\r\n//                 // Si hay un error en la comunicaciÃ³n, revertir el estado\r\n//                 this.checked = !this.checked; \r\n//             }\r\n//         });\r\n//     });\r\n// })();\r\n\r\n(function() {\r\n    // Solo ejecuta el script si existen checkboxes de Ã¡rbitros\r\n    if (document.querySelector('.check_arbis')) {\r\n        document.querySelectorAll('.check_arbis').forEach(toggle_arbitros => {\r\n            toggle_arbitros.addEventListener('change', async function () {\r\n                const arbitro_id = this.getAttribute('data-id');\r\n                const activo = this.checked ? 1 : 0;\r\n\r\n                try {\r\n                    const respuesta = await fetch('/admin/arbitros/actualizar-estado', {\r\n                        method: 'POST',\r\n                        headers: { 'Content-Type': 'application/json' },\r\n                        body: JSON.stringify({ id: arbitro_id, activo: activo }),\r\n                    });\r\n\r\n                    if (respuesta.ok) {\r\n                        const resultado_arbis = await respuesta.json();\r\n                        if (resultado_arbis.success) {\r\n                            this.checked = activo === 1; \r\n                        } else {\r\n                            alert('Error actualizando el estado');\r\n                            this.checked = !this.checked;\r\n                        }\r\n                    } else {\r\n                        throw new Error('Error en la respuesta del servidor');\r\n                    }\r\n                } catch (error) {\r\n                    console.error('Error en la comunicaciÃ³n con el servidor:', error);\r\n                    alert('Error en el servidor');\r\n                    this.checked = !this.checked;\r\n                }\r\n            });\r\n        });\r\n    }\r\n})();\r\n","document.addEventListener('DOMContentLoaded', function () {\r\n    const iconosRechazado = document.querySelectorAll('.modi');\r\n\r\n    // Crear el modal dinÃ¡micamente\r\n    const modal = document.createElement('div');\r\n    modal.classList.add('modal-hover-modi');\r\n    document.body.appendChild(modal);\r\n\r\n    iconosRechazado.forEach(icon => {\r\n        icon.addEventListener('mouseenter', function (e) {\r\n            mostrarModal(e, icon);\r\n        });\r\n\r\n        icon.addEventListener('mouseleave', function () {\r\n            ocultarModal();\r\n        });\r\n    });\r\n\r\n    /**\r\n     * Mostrar Modal al Hover\r\n     * @param {Event} e - Evento de mouse\r\n     * @param {Element} icon - Elemento sobre el que se hizo hover\r\n     */\r\n    function mostrarModal(e, icon) {\r\n        const rect = icon.getBoundingClientRect();\r\n        const observaciones = icon.getAttribute('data-observaciones') || 'Sin observaciones';\r\n\r\n        modal.textContent = observaciones; // Mostrar el valor Ãºnico de observaciones\r\n        modal.style.left = `${rect.left + window.scrollX + 35}px`;\r\n        modal.style.top = `${rect.top + window.scrollY - 5}px`;\r\n\r\n        modal.style.display = 'block';\r\n    }\r\n\r\n    /**\r\n     * Ocultar Modal al salir del Hover\r\n     */\r\n    function ocultarModal() {\r\n        modal.style.display = 'none';\r\n    }\r\n});\r\n"]}